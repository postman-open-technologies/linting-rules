[
  {
    "name": "OpenAPI V3 - Info Title",
    "slug": "openapi-v3-info-title",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI has an info title. Here is a JSON version of the rule that can be applied using this API-driven collection API, via monitor, and at CLI or CI/CD pipeline.",
    "tags": [
      "Info"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object title.",
      "message": "The info object should have a title.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "title",
        "function": "truthy"
      }
    },
    "collection_id": "12959542-93b89a18-10e5-4cbc-bcb2-79fd0bb4a420",
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-title.md?ref=main",
    "github_sha": "1cc02ae73882b32c3560e925ea7fdc204c97983c"
  },
  {
    "name": "OpenAPI V3 - Info Title In Kebab Case",
    "slug": "openapi-v3-info-title-in-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info title is in kebab case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Title"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs information title are in Kebab case.",
      "message": "The info object title needs to be in Kebab case.",
      "given": "$.info.title",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[a-z][a-z0-9\\-]*$"
        }
      },
      "type": "style",
      "recommended": true,
      "formats": [
        "oas2",
        "oas3"
      ],
      "severity": "error"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-title-in-kebab-case.md?ref=main",
    "github_sha": "70ff2ff75deb3bb41a0f87a37172b28320db4dce",
    "collection_id": "12959542-66ce8bf6-2213-4ca9-9f36-67d56520437d"
  },
  {
    "name": "OpenAPI V3 - Info Title Max Length",
    "slug": "openapi-v3-info-title-max-length",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info title is under a maximum length. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Length"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs information titles are not longer than 50 characters.",
      "message": "The info object title should not be more than 50 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "title",
        "function": "length",
        "functionOptions": {
          "max": 50
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-title-max-length.md?ref=main",
    "github_sha": "b3879fdc5c0a71454c40de7ae036f07839855134",
    "collection_id": "12959542-15441d35-4f21-40de-9805-41fad615f945"
  },
  {
    "name": "OpenAPI V3 - Info Title Word Check",
    "slug": "openapi-v3-info-title-word-check",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info title doesn't contain certain words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Filters",
      "Dictionaries"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs info object title do not contain certain words.",
      "message": "The info object title should not contain the words REST, Public, and Developer.",
      "given": "$.info.title",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-title-word-check.md?ref=main",
    "github_sha": "120eb772415d9c33329ec9a5798aee671e7d19b3",
    "collection_id": "12959542-d48ac8b1-3b00-4042-9766-76470d634c6a"
  },
  {
    "name": "OpenAPI V3 - Info Description Max Length",
    "slug": "openapi-v3-info-description-max-length",
    "summary": "This is a Spectral governance rule to enforce that an OpenAPI information object description meet a specific length requirement, making sure that descriptions aren't too long, and provide the precise right amount of information for consumers.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Length"
    ],
    "rule": {
      "description": "Ensures that all APIs descriptions are under a specific length.",
      "message": "The info object description should be less than 250 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-description-max-length.md?ref=main",
    "github_sha": "b341e587149b4bd3bcbb682deb0f5f216a18a46e",
    "collection_id": "12959542-945346be-b8fa-4aea-8898-2f544e1c62d3"
  },
  {
    "name": "OpenAPI V3 Info Description Word Check",
    "slug": "openapi-v3-info-description-word-check",
    "summary": "This is a Spectral governance rule to enforce that an OpenAPI information object description does not contain certain words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Filters",
      "Dictionaries"
    ],
    "rule": {
      "description": "Ensures that all APIs descriptions do not contain certain words.",
      "message": "The info object description cannot contain the words REST, public, developer.",
      "given": "$.info.description",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-description-word-check.md?ref=main",
    "github_sha": "bdaca28109e01da5f565104cc332607c2e1f9560",
    "collection_id": "12959542-df3139c9-6f02-4c06-ba3a-259c27125d3c"
  },
  {
    "name": "OpenAPI V3 Info Description",
    "slug": "openapi-v3-info-description",
    "summary": "This is a Spectral governance rule to enforce that an OpenAPI has a description included as part of the information object, making sure there is as much detail about what an API does available for consumers. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Documentation"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information description.",
      "message": "The info object should have a description.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-description.md?ref=main",
    "github_sha": "716238325222cace729d13d6c42e7b0b29fc572f",
    "collection_id": "12959542-6fc8abf4-783d-471f-b967-841f431e9f97"
  },
  {
    "name": "OpenAPI V3 - Info Summary Max Length",
    "slug": "openapi-v3-info-summary-max-length",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object summary has a maximum length. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Length"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs information object summary are not too long.",
      "message": "The info object summary should be less than 50 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 50
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-summary-max-length.md?ref=main",
    "github_sha": "a770fae88ba96e9f1b82643cc5553615ff178410",
    "collection_id": "12959542-002d9b61-961a-469b-898a-ddcf2f70faf7"
  },
  {
    "name": "OpenAPI V3 - Info Summary Word Check",
    "slug": "openapi-v3-info-summary-word-check",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object summary does not contain certain words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Filters",
      "Dictionaries"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs information object summary do not contain some words.",
      "message": "The info object summary should not contain the words REST, Public, or Developer.",
      "given": "$.info.summary",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-summary-word-check.md?ref=main",
    "github_sha": "41aa1baa114bda5152d7e3c70b36e250cb109050",
    "collection_id": "12959542-e2fec228-3e73-4f8c-97d0-06c11adf7a32"
  },
  {
    "name": "OpenAPI V3 - Info Summary",
    "slug": "openapi-v3-info-summary",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI has an info object summary. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Summary",
      "Info"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object summary.",
      "message": "The info object should have a summary.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "summary",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-summary.md?ref=main",
    "github_sha": "42d7eb74c11d30345846bf75e416f209a188e6c6",
    "collection_id": "12959542-419d5f01-b723-41ef-9145-c4d216156c18"
  },
  {
    "name": "OpenAPI V3 - Info Contact",
    "slug": "openapi-v3-info-contact",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a contact. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact information.",
      "message": "API must have a contact information available.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "contact",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-contact.md?ref=main",
    "github_sha": "1cbfda0e6f30103551dd4f89d852b15360f22549",
    "collection_id": "12959542-72bca7c4-08b4-4308-9819-c47fb4ba0a46"
  },
  {
    "name": "OpenAPI V3 - Info Contact Email",
    "slug": "openapi-v3-info-contact-email",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a contact email. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact email.",
      "message": "API must have a contact email available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "email",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-contact-email.md?ref=main",
    "github_sha": "102a67f1ce820682483a581c5b399d60db5be120",
    "collection_id": "12959542-b73bee8e-c223-474e-a93c-c27f6c142822"
  },
  {
    "name": "OpenAPI V3 - Info Contact Name",
    "slug": "openapi-v3-info-contact-name",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a contact name. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact name.",
      "message": "API must have a contact name available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-contact-name.md?ref=main",
    "github_sha": "f1272208586b28ef939eef2d4f8a53d928038c89",
    "collection_id": "12959542-b24b53a9-d792-43c7-b2ee-e0dc0376ddf9"
  },
  {
    "name": "OpenAPI V3 - Info Contact Url",
    "slug": "openapi-v3-info-contact-url",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a contact url. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact URL.",
      "message": "API must have a contact URL available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-contact-url.md?ref=main",
    "github_sha": "b83978cfb11eee6f5e3e4d819e73b1af15b26b80",
    "collection_id": "12959542-e76c368a-1f2a-47c9-b622-d5cab05b1561"
  },
  {
    "name": "OpenAPI V3 - Info License",
    "slug": "openapi-v3-info-license",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Licensing",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object license.",
      "message": "The info object should have a license.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "license",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-license.md?ref=main",
    "github_sha": "5defc299e9a6f8326fbfa9f98a1bb02c01d88335",
    "collection_id": "12959542-0505ca14-0909-4fdb-bb1d-892fab77bdde"
  },
  {
    "name": "OpenAPI V3 - Info License Name",
    "slug": "openapi-v3-info-license-name",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a license name. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object license name.",
      "message": "The info object should have a license name.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-license-name.md?ref=main",
    "github_sha": "277009e6806558d1c4caa8a47027fb65c2bf03fc",
    "collection_id": "12959542-3f2f1062-930d-439e-b28b-21dfdbdd86df"
  },
  {
    "name": "OpenAPI V3 - Info License Url",
    "slug": "openapi-v3-info-license-url",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a license url. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object license url.",
      "message": "The info object should have a license url.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-license-url.md?ref=main",
    "github_sha": "0fe45612951971095a192e5b207d6e3b476863c3",
    "collection_id": "12959542-a6a8c588-c78a-432f-ab9f-bf806b1862cf"
  },
  {
    "name": "OpenAPI V3 - Info License Url Apache",
    "slug": "openapi-v3-info-license-url-apache",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has an Apache license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object license url for Apache.",
      "message": "The info object should have a license url for Apache.",
      "given": "$.info.license.url",
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "apache.org"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-license-url-apache.md?ref=main",
    "github_sha": "0753c104e797d5df2162087642172bdaa25c3ed7",
    "collection_id": "12959542-bba945ec-1164-4439-8e13-e681f79d2a80"
  },
  {
    "name": "OpenAPI V3 - Info License Url Mit",
    "slug": "openapi-v3-info-license-url-mit",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has an MIT license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object license url for MIT.",
      "message": "The info object should have a license url for MIT.",
      "given": "$.info.license.url",
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "mit.edu"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-license-url-mit.md?ref=main",
    "github_sha": "870f869119f29a3d38345f625824973065e7578f",
    "collection_id": "12959542-2aff9e1a-7f7c-4735-8419-3047fb6fd248"
  },
  {
    "name": "OpenAPI V3 - Info Terms Of Service",
    "slug": "openapi-v3-info-terms-of-service",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI info object has a terms of service. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Terms of Service",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object terms of service.",
      "message": "The info object should have a terms of service.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "termsOfService",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-terms-of-service.md?ref=main",
    "github_sha": "e696f0a3cef5aeca8b2c204f5dcc65c0801b7550",
    "collection_id": "12959542-3a1fcb36-bff6-42cb-95ed-5c8efe777de8"
  },
  {
    "name": "OpenAPI V3 - Info X API Id",
    "slug": "openapi-v3-info-x-api-id",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI info has an API ID extension. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Unique ID",
      "Extensions"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object API ID extension.",
      "message": "The info object should have an API ID extension.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "then": {
        "field": "x-api-id",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-x-api-id.md?ref=main",
    "github_sha": "84d985f757eb76fdac97fe953c0529e74ca9af79",
    "collection_id": "12959542-df01afec-a0f1-4ee8-850c-0a2f9048e869"
  },
  {
    "name": "OpenAPI V3 - Info X Audience",
    "slug": "openapi-v3-info-x-audience",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI info has an audience extension. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Audience",
      "Extensions"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object audience extension.",
      "message": "The info object should have an audience extension.",
      "severity": "error",
      "given": "$.info",
      "then": {
        "field": "x-audience",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-x-audience.md?ref=main",
    "github_sha": "ad429d61cee9b8d0845833ceed855d2e95babd98",
    "collection_id": "12959542-fe4819e0-91e0-4d09-a091-bda474bee8ae"
  },
  {
    "name": "OpenAPI V3 - OpenAPI Version",
    "slug": "openapi-v3-openapi-version",
    "summary": "This is a Spectral governance rule to make sure that a specific version of OpenAPI is being used. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that a specific version of OpenAPI is being used.",
      "message": "You do not have the right version of OpenAPI.",
      "severity": "error",
      "given": "$",
      "then": {
        "field": "openapi",
        "function": "pattern",
        "functionOptions": {
          "match": "3.0.3"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-openapi-version.md?ref=main",
    "github_sha": "06aa5bfeb49ab801f4b17b0a42d7d6207aeb11f4",
    "collection_id": "12959542-37bf5d40-836b-43f8-874f-9b7b242708c6"
  },
  {
    "name": "OpenAPI V3 - Info Version",
    "slug": "openapi-v3-info-version",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI has an info version. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning",
      "Info"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have a information object version.",
      "message": "The info object should have a version.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "version",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-info-version.md?ref=main",
    "github_sha": "97f0752cf2be06ed3ead8d88ccdb6acc7f01b8ff",
    "collection_id": "12959542-0224b44e-4379-4b5c-862e-bbb8f8c4ce12"
  },
  {
    "name": "OpenAPI V3 - Version Date Format",
    "slug": "openapi-v3-version-date-format",
    "summary": "This is a Spectral governance rule to make sure that there is at data version applied within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that there is a data form version applied.",
      "message": "You need to have a date version format.",
      "severity": "error",
      "recommended": true,
      "given": "$.info.version",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^([0-9]{4}-[0-9]{2}-[0-9]{2})$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-version-date-format.md?ref=main",
    "github_sha": "e8c55469a72ca8e409045b269ada3d6424f935bc",
    "collection_id": "12959542-9b8ba6d0-17cf-4708-9cd1-762bd2d4136a"
  },
  {
    "name": "OpenAPI V3 - Version Semantic",
    "slug": "openapi-v3-version-semantic",
    "summary": "An API governance linting rule to enforce that semantic versioning has been applied to an OpenAPI, making sure that all teams are using the same versioning patterns, and all APIs are being versioned.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that semantic versioning is being used.",
      "message": "You need to provide a semantic version.",
      "severity": "error",
      "recommended": true,
      "given": "$.info.version",
      "then": {
        "function": "pattern",
        "functionOptions": null,
        "match": "^[0-9]+.[0-9]+.[0-9]+(-[a-z0-9+.-]+)?"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-version-semantic.md?ref=main",
    "github_sha": "126e1eb6e2790670293976b3508f263bdce45f19",
    "collection_id": "12959542-58695c33-2e73-48cb-a9d2-20170492cce7"
  },
  {
    "name": "OpenAPI V3 - Version Second Segment",
    "slug": "openapi-v3-version-segment-second",
    "summary": "This is a Spectral governance rule to make sure that the second segment of the path a version. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring the second path segment is a version like v1.",
      "message": "The second path segment should be the version.",
      "given": "$.paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "match": "^/[^/]+/v\\d+/.+$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-version-segment-second.md?ref=main",
    "github_sha": "df35f4d4fa10c949c9223243a09519da080aea80",
    "collection_id": "12959542-4e2509a9-1726-4755-ab02-df8679adf9be"
  },
  {
    "name": "OpenAPI V3 HTTPS Only",
    "slug": "openapi-v3-https-only",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI is only using HTTPS for the server protocol. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Servers",
      "Security",
      "Encryption"
    ],
    "rule": {
      "description": "Ensures that all APIs are only using HTTPS protocol as a transport.",
      "message": "You must only use HTTPS for the server transport protocol.",
      "formats": [
        "oas3"
      ],
      "severity": "error",
      "given": "$.servers..url",
      "then": {
        "function": "pattern",
        "functionOptions": null,
        "match": "/^https:/"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-https-only.md?ref=main",
    "github_sha": "670feb22738d40d997125f5caa639938a1473af2",
    "collection_id": "12959542-997270a6-2e90-4c7e-85ce-1a982d1f93d1"
  },
  {
    "name": "OpenAPI V3 - Do Not Use API for Base Path",
    "slug": "openapi-v3-do-not-use-api-for-base-path",
    "summary": "This is a Spectral governance rule to make sure that /api is not used as base path in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that paths do not use /api as part of the base path.",
      "message": "You should not use /api as part of your base path.",
      "severity": "warn",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "^/api"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-do-not-use-api-for-base-path.md?ref=main",
    "github_sha": "9cf4ee57c3cffb1032c00dc13e78a5eebc680160",
    "collection_id": "12959542-19b4a5c5-c25f-4edc-84f4-b74ed57713ef"
  },
  {
    "name": "OpenAPI V3 - No Path Dashes",
    "slug": "openapi-v3-no-path-dashes",
    "summary": "This is a Spectral governance rule to make sure that paths should not contain dashes in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that paths do not contain dashes.",
      "message": "Your paths should not contain dashes.",
      "severity": "error",
      "recommended": true,
      "given": "$.paths[*]~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/-/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-no-path-dashes.md?ref=main",
    "github_sha": "197bfe7b1e0db5f34d9e217ca3a5b49c730fe578",
    "collection_id": "12959542-f518ca55-f448-40c3-b868-18ee998acff7"
  },
  {
    "name": "OpenAPI V3 - No Empty Paths",
    "slug": "openapi-v3-no-empty-paths",
    "summary": "This is a Spectral governance rule to make sure that there are no empty paths in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are no empty paths.",
      "message": "There should be no empty paths.",
      "documentationUrl": "https://opensource.zalando.com/restful-api-guidelines/#136",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "//"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-no-empty-paths.md?ref=main",
    "github_sha": "d729b1fb227743759361c6be0e52a4940c095f76",
    "collection_id": "12959542-af720453-764e-4e88-987b-16e3bb4b8db2"
  },
  {
    "name": "OpenAPI V3 - Limit Number of Paths",
    "slug": "openapi-v3-limit-number-of-paths",
    "summary": "This is a Spectral governance rule to make sure that there aren't too many paths in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are not too many paths.",
      "message": "There should be no more than 10 paths.",
      "severity": "warn",
      "given": "$.paths",
      "then": {
        "function": "count-resource-types",
        "functionOptions": {
          "max": 10
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-limit-number-of-paths.md?ref=main",
    "github_sha": "dd444ed7605655c9f4688a3183071173b18b23e8",
    "collection_id": "12959542-5aaee088-1cd7-4c0e-b079-6b6df6c42b36"
  },
  {
    "name": "OpenAPI V3 - Limit Number of Sub-resources",
    "slug": "openapi-v3-limit-number-of-sub-resources",
    "summary": "This is a Spectral governance rule to make sure that there aren't too many sub-resources in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are not too many sub-resources.",
      "message": "There should be no more than three levels of sub-resources.",
      "severity": "warn",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^/[^/]*((/{[^}]*})*/[^/]*(/{[^}]*})*){0,3}/?$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-limit-number-of-sub-resources.md?ref=main",
    "github_sha": "9477e7d749074722e96d330a17e9cc9ee6f65944",
    "collection_id": "12959542-57226d1a-49e8-4274-bc52-6606f0c8a0d9"
  },
  {
    "name": "OpenAPI V3 - No Trailing Slash on Paths",
    "slug": "openapi-v3-no-trailing-slash-on-paths",
    "summary": "This is a Spectral governance rule to make sure that there are no trailing slashes on paths in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are no trailing slashes on paths.",
      "message": "There should be no trailing slashes on paths.",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-no-trailing-slash-on-paths.md?ref=main",
    "github_sha": "0e591bf6c00ccb35bb88422ae91a31697b24be14",
    "collection_id": "12959542-d2bdcd48-c974-4a93-85f7-674db7653970"
  },
  {
    "name": "OpenAPI V3 - Trailing Slash on Paths",
    "slug": "openapi-v3-trailing-slash-on-paths",
    "summary": "This is a Spectral governance rule to make sure that there are trailing slashes on paths in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are trailing slashes on paths.",
      "message": "There should be trailing slashes on paths.",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "/$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-trailing-slash-on-paths.md?ref=main",
    "github_sha": "3642be598eaf6417d82caf199b81e292c16d31ba",
    "collection_id": "12959542-4febb51f-0bc7-41d6-bae2-e5e453393c69"
  },
  {
    "name": "OpenAPI V3 Have GET Method",
    "slug": "openapi-v3-have-get-method",
    "summary": "Needs a summary.",
    "tags": [
      "Methods"
    ],
    "rule": {
      "description": "Ensures that all APIs at least have one GET method.",
      "message": "An API must have at least one GET method.",
      "formats": [
        "oas3"
      ],
      "given": "$.paths[/]",
      "severity": "warn",
      "then": {
        "field": "get",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-have-get-method.md?ref=main",
    "github_sha": "732093d6acf29d6ddb32271ccc7a23bbcfea9c58",
    "collection_id": "12959542-f6f01bf0-949d-4b51-b68b-56a77338eb17"
  },
  {
    "name": "OpenAPI V3 - Operations Description Length",
    "slug": "openapi-v3-operations-description-length",
    "summary": "This is a Spectral governance rule to enforce the length of API operation descriptions within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Length"
    ],
    "rule": {
      "description": "Ensures that the description for operations are not too long.",
      "message": "Your operation descriptions should not be more than 250 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "description",
          "function": "length",
          "functionOptions": {
            "max": 250
          }
        }
      ],
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-description-length.md?ref=main",
    "github_sha": "fa76017c02b4b7afa35701e4b5a06301edded2a5",
    "collection_id": "12959542-ff8a5fbc-bf2a-4740-ad5b-f3389f389e7b"
  },
  {
    "name": "OpenAPI V3 - Operations Description Words Check",
    "slug": "openapi-v3-operations-description-words-check",
    "summary": "This is a Spectral governance rule to make sure that some words are never used in the description of operations within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Words"
    ],
    "rule": {
      "description": "Ensures that the description do not contain certain words.",
      "message": "Your operation descriptions should not use the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].description",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-description-words-check.md?ref=main",
    "github_sha": "a743922069d551410135f04ee671c15b30fc343e",
    "collection_id": "12959542-54c1eecf-29d4-45ae-9f8c-679ebc7521fc"
  },
  {
    "name": "OpenAPI V3 - Operations Description",
    "slug": "openapi-v3-operations-description",
    "summary": "This is a Spectral governance rule to make sure that some words are never used in the description of operations within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "description": "Ensures that each of the operations have a description.",
      "message": "Your operations all need descriptions.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "description",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-description.md?ref=main",
    "github_sha": "d369b3617b85463fcc442cbd1349ad03ca744b36",
    "collection_id": "12959542-c2b8287d-5280-4e4e-a056-8a92158c6b05"
  },
  {
    "name": "OpenAPI V3 - Operations Operation IDs Camel Case",
    "slug": "openapi-v3-operations-operation-ids-camel-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are camel case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are camel case.",
      "message": "Your operations IDs need to be camel case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-operation-ids-camel-case.md?ref=main",
    "github_sha": "a18fdb49a7d0a700dbb21904de1a05d424d37770",
    "collection_id": "12959542-cd273011-3a92-4f2e-b1a6-8bd8801615e7"
  },
  {
    "name": "OpenAPI V3 - Operations Operation IDs Kebab Case",
    "slug": "openapi-v3-operations-operation-ids-kebab-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are kebab case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are kebab case.",
      "message": "Your operations IDs need to be kebab case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-operation-ids-kebab-case.md?ref=main",
    "github_sha": "c47484ab73112875012e2c659b79b539c79b9425",
    "collection_id": "12959542-5b95cd65-abc3-426c-926d-57e72895886c"
  },
  {
    "name": "OpenAPI V3 - Operations Operation IDs Pascal Case",
    "slug": "oopenapi-v3-perations-operation-ids-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are pascal case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are pascal case.",
      "message": "Your operations IDs need to be pascal case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/oopenapi-v3-perations-operation-ids-pascal-case.md?ref=main",
    "github_sha": "603e350aa20235bd43c36f4ed82e49684ee46508",
    "collection_id": "12959542-256b61fa-80b4-4c86-bd7c-014deda3093c"
  },
  {
    "name": "OpenAPI V3 - Operations Summary Length",
    "slug": "openapi-v3-operations-summary-length",
    "summary": "This is a Spectral governance rule to make sure that operation summaries are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Length"
    ],
    "rule": {
      "description": "Ensures that each of the operations summaries are not too long.",
      "message": "Your operations summaries can't be longer than 50 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "summary",
          "function": "length",
          "functionOptions": {
            "max": 50
          }
        }
      ],
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-summary-length.md?ref=main",
    "github_sha": "2ee4aff018b4c09c17f024e67276f58a84fa4a7a",
    "collection_id": "12959542-71084ab3-ba02-4b24-8b4f-4a0f846e1d4e"
  },
  {
    "name": "OpenAPI V3 - Operations Summary Period None",
    "slug": "openapi-v3-operations-summary-period-none",
    "summary": "This is a Spectral governance rule to make sure that operation summaries do not have a ending period. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "severity": "error",
      "description": "Ensures that each of the operations summaries do not have an ending period.",
      "message": "Your operations summaries should not end with a period.",
      "given": "$.paths[*][*].summary",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\.$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-summary-period-none.md?ref=main",
    "github_sha": "b3a68aa02a1e067e8e31d02e02b497c949c928e1",
    "collection_id": "12959542-5ddc15db-e024-4bbb-8b6f-04d06742b8f8"
  },
  {
    "name": "OpenAPI V3 - Operations Summary Words Check",
    "slug": "openapi-v3-operations-summary-words-check",
    "summary": "This is a Spectral governance rule to make sure that operation summaries do not contain specific words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Words"
    ],
    "rule": {
      "description": "Ensures that each of the operations summaries do not content certain words.",
      "message": "Your operations summaries should not contain the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].summary",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-summary-words-check.md?ref=main",
    "github_sha": "80bbdf80902ff3453ebca81bb2528aaea1de41a8",
    "collection_id": "12959542-183e3bdf-4544-444a-8a66-86be4c4a2faf"
  },
  {
    "name": "OpenAPI V3 - Operations Summary",
    "slug": "openapi-v3-operations-summary",
    "summary": "This is a Spectral governance rule to make sure that all operations have summaries. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "description": "Ensures that each of the operations for an API have a summary.",
      "message": "All of your operations need summaries.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "summary",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-summary.md?ref=main",
    "github_sha": "5f8033ba355e11bf91928a1c7ea3c5e395aaa3f6",
    "collection_id": "12959542-eeea8d45-d7e2-4777-bc21-ff6a797ed5e5"
  },
  {
    "name": "OpenAPI V3 - Operations Tags One",
    "slug": "openapi-v3-operations-tags-one",
    "summary": "This is a Spectral governance rule to make sure that all operations have at least one tag. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Tags"
    ],
    "rule": {
      "description": "Ensures that each of the operations have at least one tag.",
      "message": "All of your operations need to have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-tags-one.md?ref=main",
    "github_sha": "9e5423e801dc0e3511a6e9f1ec41a9b54b572acc",
    "collection_id": "12959542-8d6b759c-38f5-4525-90f7-ce96fac65b1f"
  },
  {
    "name": "OpenAPI V3 - Operations Tags",
    "slug": "openapi-v3-operations-tags",
    "summary": "This is a Spectral governance rule to make sure that all operations have a tags property. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Tags"
    ],
    "rule": {
      "description": "Ensures that each of the operations have a tags property.",
      "message": "All of your operations need to have tags.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "tags",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-operations-tags.md?ref=main",
    "github_sha": "e560e3013b3f79219df482d5bd4a8dbc5f5e8c6c",
    "collection_id": "12959542-ed0bfe5d-32e0-46e6-9e49-a435d22dd11d"
  },
  {
    "name": "OpenAPI V3 - Parameters Description Length",
    "slug": "openapi-v3-parameters-description-length",
    "summary": "This is a Spectral governance rule to make sure that all parameters description are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Length"
    ],
    "rule": {
      "description": "Ensures that each of parameter description isn't too long.",
      "message": "Your parameter descriptions can't be more than 500 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 500
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-description-length.md?ref=main",
    "github_sha": "1fe0df41e8cb40660e4ee05f595daf14dfae4639",
    "collection_id": "12959542-c2d16275-4a2a-4294-bf1e-7d1b5fdbf46f"
  },
  {
    "name": "OpenAPI V3 - Parameters Description Word Check",
    "slug": "openapi-v3-parameters-description-word-check",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in parameter description. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Words"
    ],
    "rule": {
      "description": "Ensures that some words aren't used in parameter descriptions.",
      "message": "Your parameter descriptions can't contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-description-word-check.md?ref=main",
    "github_sha": "c4735e33d20eb954584bb0c1a36bf2144bd392d2",
    "collection_id": "12959542-8c4af658-a5bc-4af1-94a1-8b91c1d0fd63"
  },
  {
    "name": "OpenAPI V3 - Parameters Description",
    "slug": "openapi-v3-parameters-description",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a description in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a descriptions.",
      "message": "Your parameters all need descriptions.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-description.md?ref=main",
    "github_sha": "6e8df8ba6df1849c09f17a407f1432d1bf1dbf1b",
    "collection_id": "12959542-5ee4b2e6-838d-4bd3-8230-bdbfd0e1aef1"
  },
  {
    "name": "OpenAPI V3 - Parameters Example",
    "slug": "openapi-v3-parameters-example",
    "summary": "This is a Spectral governance rule to make sure that all parameters have an example in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Examples"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a examples.",
      "message": "Your parameters all need examples.",
      "given": "$.paths.*.*.parameters[?(@.example=='query')]",
      "then": [
        {
          "field": "example",
          "function": "truthy"
        },
        {
          "field": "examples",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-example.md?ref=main",
    "github_sha": "b9ddc7bdaf24534f43dd6cbb8c0800e4d985408d",
    "collection_id": "12959542-029083e2-59d2-4414-b47c-39fc61a886f2"
  },
  {
    "name": "OpenAPI V3 - Parameters In",
    "slug": "openapi-v3-parameters-in",
    "summary": "This is a Spectral governance rule to make sure that all parameters have an in property within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have an in property.",
      "message": "Your parameters all need to have in properties.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "in",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-in.md?ref=main",
    "github_sha": "cd395ff6e5df922ad13daaa8fdb891bcfad70c18",
    "collection_id": "12959542-65ea4af3-7264-4bee-964d-3437ce295dfd"
  },
  {
    "name": "OpenAPI V3 - Parameters Name Length",
    "slug": "openapi-v3-parameters-name-length",
    "summary": "This is a Spectral governance rule to make sure that all parameter aren't too long within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Length"
    ],
    "rule": {
      "description": "Ensures that that parameter names aren't too long.",
      "message": "Your parameter names should not be longer than 25 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name-length.md?ref=main",
    "github_sha": "bf4348eaa6d853450211826a203c90e3b13d523c",
    "collection_id": "12959542-14d573df-68e2-4199-b5c8-452ace5dc78d"
  },
  {
    "name": "OpenAPI V3 - Parameters Name Camel Case",
    "slug": "openapi-v3-parameters-name-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are camel case within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are camel case.",
      "message": "Your parameter names should all be camel case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name-camel-case.md?ref=main",
    "github_sha": "0df2ccbc09823ed942eee420e5b502ad16541436",
    "collection_id": "12959542-d7dcad61-c768-4ca1-8151-8b702bf69ce7"
  },
  {
    "name": "OpenAPI V3 - Parameters Name Pascal Case",
    "slug": "openapi-v3-parameters-name-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are pascal case within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are pascal case.",
      "message": "Your parameter names should all be pascal case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name-pascal-case.md?ref=main",
    "github_sha": "337405b99f0754eed2ad2c2e8b71077220c59e05",
    "collection_id": "12959542-a73a34e9-05cc-467f-b2c2-829bd9631689"
  },
  {
    "name": "OpenAPI V3 - Parameters Name Snake Case",
    "slug": "openapi-v3-parameters-name-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are snake case within an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are snake case.",
      "message": "Your parameter names should all be snake case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name-snake-case.md?ref=main",
    "github_sha": "c87e699264703f16cc954fd6d7af8cfcefa8f4c7",
    "collection_id": "12959542-c2b9e53b-9982-4f46-a35a-b9364af89b14"
  },
  {
    "name": "OpenAPI V3 - Parameters Name Word Check",
    "slug": "openapi-v3-parameters-name-word-check",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used for parameter names in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Words"
    ],
    "rule": {
      "description": "Ensures that that all some words aren't used for parameter names.",
      "message": "Your parameter names should not contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name-word-check.md?ref=main",
    "github_sha": "6a5e14745eb0a1f049dcc5fa4db224add6adcc80",
    "collection_id": "12959542-1fbf70dd-d932-45e5-b151-27d8ccef5c13"
  },
  {
    "name": "OpenAPI V3 - Parameters Name",
    "slug": "openapi-v3-parameters-name",
    "summary": "This is a Spectral governance rule to make sure that all parameters a name in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a name.",
      "message": "Your parameter should all have names.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-name.md?ref=main",
    "github_sha": "3a01e908a05613b9449ae0e1827af10426f84399",
    "collection_id": "12959542-9807d1a3-fdf6-4b43-8c7c-00f6f8379b94"
  },
  {
    "name": "OpenAPI V3 - Parameters Schema",
    "slug": "openapi-v3-parameters-schema",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a schema defined in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a schema.",
      "message": "Your parameter should all have a schema defined.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "schema",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-schema.md?ref=main",
    "github_sha": "81247f31c7c990ec5013c38b4e08ae3cebfc2276",
    "collection_id": "12959542-f3c8a0da-0ddf-436f-8fa3-7d625ed5e46d"
  },
  {
    "name": "OpenAPI V3 - Parameters Schema Type",
    "slug": "openapi-v3-parameters-schema-type",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a schema type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a schema type.",
      "message": "Your parameter should all schema types.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].schema",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-schema-type.md?ref=main",
    "github_sha": "939a792929830c18d10fd41e16532f49c0507914",
    "collection_id": "12959542-b0143264-704a-4f6c-8474-967d5adb86fa"
  },
  {
    "name": "OpenAPI V3 - Parameters Schema Type Array",
    "slug": "openapi-v3-parameters-schema-type-array",
    "summary": "This is a Spectral governance rule to make sure that all parameters with schema type of array have items defined in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters of schema type array have items defined.",
      "message": "Your parameter schema should have an items property if it is an array.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].schema[?(@.type=='array')]",
      "then": {
        "field": "items",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-parameters-schema-type-array.md?ref=main",
    "github_sha": "3f7e155411a93597d6b23caac80f3723c42d0880",
    "collection_id": "12959542-8a4595f1-81f5-4918-8f14-bdc62e92f96f"
  },
  {
    "name": "OpenAPI V3 - No Request Body on GET",
    "slug": "openapi-v3-no-request-body-on-get",
    "summary": "This is a Spectral governance rule to make sure that no GET method has a request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "GET",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that GET methods do not have request bodies.",
      "message": "Your GET methods should not have request bodies.",
      "given": "$.paths.*.get",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "requestBody",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-no-request-body-on-get.md?ref=main",
    "github_sha": "24285130e6c740cd7dcbee7c0e32dcdfc25d4dd1",
    "collection_id": "12959542-61d4ea79-f11b-456e-a526-69b7833f39a9"
  },
  {
    "name": "OpenAPI V3 - Request Body on POST",
    "slug": "openapi-v3-request-body-on-post",
    "summary": "This is a Spectral governance rule to make sure that POST methods have a request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "POST",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that POST methods have request bodies.",
      "message": "Your POST methods should have request bodies.",
      "given": "$.paths.*.post",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "requestBody",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-on-post.md?ref=main",
    "github_sha": "4edc04e49cc15be950a6ffa85e7ce6ed957f8335",
    "collection_id": "12959542-24eb0330-5ddd-4c8f-be61-c1fbcd0bdc4c"
  },
  {
    "name": "OpenAPI V3 - Request Body JSON Media Type on POST",
    "slug": "openapi-v3-request-body-json-media-type-on-post",
    "summary": "This is a Spectral governance rule to make sure that POST methods have an application/json media type for the request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "POST",
      "Request Bodies",
      "Media Types"
    ],
    "rule": {
      "description": "Ensures that POST methods have request bodies.",
      "message": "Your POST methods should have request bodies.",
      "given": "$.paths.*.post[requestBody].content",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-json-media-type-on-post.md?ref=main",
    "github_sha": "cfc3a6d3ff7d90ded27a73a6d53a19af7db36b02",
    "collection_id": "12959542-817d888d-9a29-40a4-a534-e79939365a7c"
  },
  {
    "name": "OpenAPI V3 - Request Body on PUT",
    "slug": "openapi-v3-request-body-on-put",
    "summary": "This is a Spectral governance rule to make sure that PUT methods have a request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PUT",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that PUT methods have request bodies.",
      "message": "Your PUT methods should have request bodies.",
      "given": "$.paths.*.put",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "requestBody",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-on-put.md?ref=main",
    "github_sha": "211e089e79f6208980b9f4fcb53ad0d926ebb169",
    "collection_id": "12959542-254550af-ae18-463f-a186-d4513c316ebe"
  },
  {
    "name": "OpenAPI V3 - Request Body JSON Media Type on PUT",
    "slug": "openapi-v3-request-body-json-media-type-on-put",
    "summary": "This is a Spectral governance rule to make sure that PUT methods have an application/json media type for the request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PUT",
      "Request Bodies",
      "Media Types"
    ],
    "rule": {
      "description": "Ensures that PUT methods have request bodies.",
      "message": "Your PUT methods should have request bodies.",
      "given": "$.paths.*.put[requestBody].content",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-json-media-type-on-put.md?ref=main",
    "github_sha": "ff91669dc6b7b1055f4d4c48a3f028364dbc54f0",
    "collection_id": "12959542-5740b0e2-7134-42a3-a5bf-a68f84862fec"
  },
  {
    "name": "OpenAPI V3 - Request Body on PATCH",
    "slug": "openapi-v3-request-body-on-patch",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods have a request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PATCH",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that PATCH methods have request bodies.",
      "message": "Your PATCH methods should have request bodies.",
      "given": "$.paths.*.patch",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "requestBody",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-on-patch.md?ref=main",
    "github_sha": "6a4299f8ccec8b66b5fb33d07553c080192640fd",
    "collection_id": "12959542-9c7de7dd-197e-46b2-8cb1-1fd4cf4b4c91"
  },
  {
    "name": "OpenAPI V3 - Request Body JSON Media Type on PATCH",
    "slug": "openapi-v3-request-body-json-media-type-on-patch",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods have an application/json media type for the request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PATCH",
      "Request Bodies",
      "Media Types"
    ],
    "rule": {
      "description": "Ensures that PATCH methods have request bodies.",
      "message": "Your PATCH methods should have request bodies.",
      "given": "$.paths.*.patch[requestBody].content",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-json-media-type-on-patch.md?ref=main",
    "github_sha": "e92018ee7f1c7b387c4b1f47f9c9e04907545b2e",
    "collection_id": "12959542-6108c589-4c82-4006-963e-d11a287474e4"
  },
  {
    "name": "OpenAPI V3 - No Request Body on DELETE",
    "slug": "openapi-v3-no-request-body-on-delete",
    "summary": "This is a Spectral governance rule to make sure that no DELETE method has a request body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "DELETE",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that DELETE methods do not have request bodies.",
      "message": "Your DELETE methods should not have request bodies.",
      "given": "$.paths.*.delete",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "requestBody",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-no-request-body-on-delete.md?ref=main",
    "github_sha": "358514850f9e439dccb51e939f065b42aeceb8f9",
    "collection_id": "12959542-31b6fb44-2813-4367-b944-53873362d8c3"
  },
  {
    "name": "OpenAPI V3 Have Request Body Examples",
    "slug": "openapi-v3-have-request-body-examples",
    "summary": "This is a Spectral governance rule to enforce that all OpenAPI request bodies have an example present, showing what is expected when a request body is submitted as part of an API request. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Request Bodies",
      "Examples"
    ],
    "rule": {
      "severity": "error",
      "description": "Ensures that a example is always present for each request body.",
      "message": "All request bodies should have an example present.",
      "given": "$.paths.*.*.requestBody..[?(@.items)][?(@.type == 'object')]",
      "formats": [
        "oas3"
      ],
      "then": [
        {
          "field": "example",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-have-request-body-examples.md?ref=main",
    "github_sha": "243f7f7f26b0d8974b7ad9ac352c5c9b328e397c",
    "collection_id": "12959542-2ebb9ac3-6e9f-4b35-a2b7-10b25692492f"
  },
  {
    "name": "OpenAPI V3 - Response GET 200 Status Code",
    "slug": "openapi-v3-response-get-200-status-code",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 200 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures GET operations have a 200 status code response.",
      "message": "A GET operation should have a 200 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "200",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-get-200-status-code.md?ref=main",
    "github_sha": "696290d096bfa4fd7726159ac856487b1230978a",
    "collection_id": "12959542-c54d9f73-38db-4e2f-b5e4-513f84016897"
  },
  {
    "name": "OpenAPI V3 - Response GET 200 Media Type",
    "slug": "openapi-v3-response-get-200-media-type",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 200 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensuring GET operations have an application/json media type for 200 responses.",
      "message": "A GET operation should have an application/json media type for 200 response.",
      "severity": "error",
      "given": "$paths.get.responses.200.content",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-get-200-media-type.md?ref=main",
    "github_sha": "396f26943d8988944d9f62e17a3bdd4cd91120ff",
    "collection_id": "12959542-f9d32430-6616-40ab-ba6e-a32a83ee45bc"
  },
  {
    "name": "OpenAPI V3 - Response GET 500 Status Code",
    "slug": "openapi-v3-response-get-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 500 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures GET operations have a 500 status code response.",
      "message": "A GET operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-get-500-status-code.md?ref=main",
    "github_sha": "13aecd7c87ffe6a79ed2a10f37cbcf5f3595a5a2",
    "collection_id": "12959542-aef2b3fa-9440-4984-bc03-e646e18046de"
  },
  {
    "name": "OpenAPI V3 - Response GET 500 Problem JSON Media Type",
    "slug": "openapi-v3-response-get-500-problem-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 200 status code response with application/problem+json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "description": "Ensuring GET operations have an application/problem+json media type for 500 responses.",
      "message": "A GET operation should have an application/problem+json media type for 500 response.",
      "severity": "error",
      "given": "$paths.get.responses.500.content",
      "then": {
        "field": "application/problem+json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-get-500-problem-json-media-type.md?ref=main",
    "github_sha": "2aa1d2714b8418cc55677c97a40debcf296964e5",
    "collection_id": "12959542-3f716234-717b-4201-a1e5-f33e06f0f328"
  },
  {
    "name": "OpenAPI V3 - Response POST 201 Status Code",
    "slug": "openapi-v3-response-post-201-status-code",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 201 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures POST operations have a 201 status code response.",
      "message": "A POST operation should have a 201 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "201",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-post-201-status-code.md?ref=main",
    "github_sha": "f9abb87f13f041b63c8c3b9d81c8f52769f21255",
    "collection_id": "12959542-52df912e-5d87-4e29-a509-4d64d631f214"
  },
  {
    "name": "OpenAPI V3 - Response POST 201 Media Type",
    "slug": "openapi-v3-response-post-201-media-type",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 201 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "severity": "error",
      "description": "POST responses should have a JSON body.",
      "given": "$paths.post.responses.201.content",
      "then": {
        "field": "application/json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-post-201-media-type.md?ref=main",
    "github_sha": "96285155ea3210cc75c31dd092c12280401408a4",
    "collection_id": "12959542-b87a1351-4da7-47da-94dd-73f24e6a60fd"
  },
  {
    "name": "OpenAPI V3 - Response POST 500 Status Code",
    "slug": "openapi-v3-response-post-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 500 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures POST operations have a 500 status code response.",
      "message": "A POST operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-post-500-status-code.md?ref=main",
    "github_sha": "f53cea48290f03d45da307b53916aaf1f21c27a2",
    "collection_id": "12959542-1eee4837-b576-4c8c-ba8a-dc6cbebb22a5"
  },
  {
    "name": "OpenAPI V3 - Response POST 500 Problem JSON Media Type",
    "slug": "openapi-v3-response-get-500-problem-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 500 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "description": "Ensuring POST operations have an application/problem+json media type for 500 responses.",
      "message": "A POST operation should have an application/problem+json media type for 500 response.",
      "severity": "error",
      "given": "$paths.post.responses.500.content",
      "then": {
        "field": "application/problem+json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-get-500-problem-json-media-type.md?ref=main",
    "github_sha": "0a50d83e94b49fd11e78d33d73acb26449e90ef3",
    "collection_id": "12959542-d10ee6dd-a28d-4de7-9fa2-76a7f300d39c"
  },
  {
    "name": "OpenAPI V3 - Response PUT 204 Status Code",
    "slug": "openapi-v3-response-put-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that PUT methods all have a 204 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations have a 204 status code response.",
      "message": "A PUT operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-put-204-status-code.md?ref=main",
    "github_sha": "ff29bfc14a5d687e581a76e17b4d033de739d48c",
    "collection_id": "12959542-64595edd-b69a-41f9-a154-7f70127c1abe"
  },
  {
    "name": "OpenAPI V3 - Response PUT 204 No Body",
    "slug": "openapi-v3-response-put-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that PUT methods do not have a response body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations do not have a response body.",
      "message": "A PUT operation should not have a response body.",
      "severity": "error",
      "given": "$paths.put.responses.204",
      "then": {
        "field": "content",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-put-204-no-body.md?ref=main",
    "github_sha": "3e6906def58206bade69b45103fe8e6709339c34",
    "collection_id": "12959542-5c4d1193-e00f-4079-a71a-09693865ac6d"
  },
  {
    "name": "OpenAPI V3 - Response PUT 500 Status Code",
    "slug": "openapi-v3-response-put-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that PUT methods all have a 500 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations have a 500 status code response.",
      "message": "A PUT operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].put.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-put-500-status-code.md?ref=main",
    "github_sha": "562e6d95a96e84661cff130b4f6d51a5b14f21c6",
    "collection_id": "12959542-2a6ff1b3-7c44-46cf-9e78-a923207e8d56"
  },
  {
    "name": "OpenAPI V3 - Response PUT 204 Problem JSON Media Type",
    "slug": "openapi-v3-response-put-204-problem-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that PUT methods all have a 500 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "description": "Ensuring PUT operations have an application/problem+json media type for 500 responses.",
      "message": "A PUT operation should have an application/problem+json media type for 500 response.",
      "severity": "error",
      "given": "$paths.put.responses.500.content",
      "then": {
        "field": "application/problem+json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-put-204-problem-json-media-type.md?ref=main",
    "github_sha": "edc828033d91551d10e2cc3e7d2ae443e8de3fd3",
    "collection_id": "12959542-869d39cc-fd4d-49ef-8378-75868233c9c1"
  },
  {
    "name": "OpenAPI V3 - Response PATCH 204 Status Code",
    "slug": "openapi-v3-response-patch-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods all have a 204 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations have a 204 status code response.",
      "message": "A PATCH operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-patch-204-status-code.md?ref=main",
    "github_sha": "bb67499e378611b30270896d4640ac797c65f868",
    "collection_id": "12959542-70f51796-a25e-4a20-8813-1b5ecd2e5a63"
  },
  {
    "name": "OpenAPI V3 - Response PATCH 204 No Body",
    "slug": "openapi-v3-response-patch-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods do not have a response body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations do not have a response body.",
      "message": "A PATCH operation should not have a response body.",
      "severity": "error",
      "given": "$paths.patch.responses.204",
      "then": {
        "field": "content",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-patch-204-no-body.md?ref=main",
    "github_sha": "08e69fcc394a6f87d815f0d576e767651b4858be",
    "collection_id": "12959542-285585aa-db4c-4135-a426-56e639cf8f8e"
  },
  {
    "name": "OpenAPI V3 - Response PATCH 500 Status Code",
    "slug": "openapi-v3-response-patch-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods all have a 500 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations have a 500 status code response.",
      "message": "A PATCH operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].patch.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-patch-500-status-code.md?ref=main",
    "github_sha": "3f647bd534b9cafba89f4e9af163a0e821384c81",
    "collection_id": "12959542-f97c60cf-a931-49a8-a4bd-7ed7fa147ea3"
  },
  {
    "name": "OpenAPI V3 - Response PATCH 204 Problem JSON Media Type",
    "slug": "openapi-v3-response-patch-204-problem-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods all have a 500 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "description": "Ensuring PATCH operations have an application/problem+json media type for 500 responses.",
      "message": "A PATCH operation should have an application/problem+json media type for 500 response.",
      "severity": "error",
      "given": "$paths.patch.responses.500.content",
      "then": {
        "field": "application/problem+json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-patch-204-problem-json-media-type.md?ref=main",
    "github_sha": "493910bbd0cfd23491357c53600af0b198037411",
    "collection_id": "12959542-96e358fc-b950-4507-9cdc-b8459b98a0d0"
  },
  {
    "name": "OpenAPI V3 - Response DELETE 204 Status Code",
    "slug": "openapi-v3-response-delete-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods all have a 204 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations have a 204 status code response.",
      "message": "A DELETE operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-delete-204-status-code.md?ref=main",
    "github_sha": "9248bbc1c57bda0855013060982183afe822194d",
    "collection_id": "12959542-1a932ee3-2153-4703-9bf3-da4842c7aac3"
  },
  {
    "name": "OpenAPI V3 - Response DELETE 204 No Body",
    "slug": "openapi-v3-response-delete-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods do not have a response body in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations do not have a response body.",
      "message": "A DELETE operation should not have a response body.",
      "severity": "error",
      "given": "$paths.delete.responses.204",
      "then": {
        "field": "content",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-delete-204-no-body.md?ref=main",
    "github_sha": "5168ff9e2b7caa817eb089e468e149566997c27a",
    "collection_id": "12959542-cb379d15-e509-49dd-831b-7f473dec123e"
  },
  {
    "name": "OpenAPI V3 - Response DELETE 500 Status Code",
    "slug": "openapi-v3-response-delete-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods all have a 500 status code response in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations have a 500 status code response.",
      "message": "A DELETE operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas3"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-delete-500-status-code.md?ref=main",
    "github_sha": "96bb06a83aa6d7596b6e5d6ed8b4211fb12e1e83",
    "collection_id": "12959542-1d50102e-8dc2-4d8c-9a0c-5e5e6829433b"
  },
  {
    "name": "OpenAPI V3 - Response DELETE 204 Problem JSON Media Type",
    "slug": "openapi-v3-response-delete-204-problem-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods all have a 500 status code response with application/json media type in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes",
      "Media Types"
    ],
    "rule": {
      "description": "Ensuring DELETE operations have an application/problem+json media type for 500 responses.",
      "message": "A DELETE operation should have an application/problem+json media type for 500 response.",
      "severity": "error",
      "given": "$paths.delete.responses.500.content",
      "then": {
        "field": "application/problem+json",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-delete-204-problem-json-media-type.md?ref=main",
    "github_sha": "bffb677acfa292df2cc5928c5c9a4246a96e659e",
    "collection_id": "12959542-6365bf68-ba37-40cb-86f7-9276adf1ffba"
  },
  {
    "name": "OpenAPI V3 - Responses Schema Object",
    "slug": "openapi-v3-responses-schema-object",
    "summary": "This is a Spectral governance rule to make sure that all responses have schema defined in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Responses",
      "Schema"
    ],
    "rule": {
      "description": "Ensuring all responses have a schema defined.",
      "message": "All your responses need to have a schema defined.",
      "severity": "error",
      "given": "$.paths.*.*[responses]..content..schema",
      "then": {
        "function": "is-object-schema"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-responses-schema-object.md?ref=main",
    "github_sha": "7873fb762ef66569857a409f1dd667793126cb89",
    "collection_id": "12959542-7bf191ed-00e5-4ca1-be74-4937fcb065e7"
  },
  {
    "name": "OpenAPI V3 - Use of Response Schema oneOf",
    "slug": "openapi-v3-use-of-response-schema-oneof",
    "summary": "This is a Spectral governance rule to enforce that check to see if oneOf property is being used as part of the schema for any OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Checks to see if oneOf is being used as part of each schema.",
      "message": "You should avoid using oneOf as part of your schema.",
      "given": "$.paths.*.*[responses]..content..schema",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "oneOf",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-use-of-response-schema-oneof.md?ref=main",
    "github_sha": "1a1c216ac85731985aab4e54017fafa5c52a04f2",
    "collection_id": "12959542-9d71f028-719b-410f-8afc-131ff9ecf3eb"
  },
  {
    "name": "OpenAPI V3 - Use of Response Schema anyOf",
    "slug": "openapi-v3-use-of-response-schema-anyof",
    "summary": "This is a Spectral governance rule to enforce that check to see if anyOf property is being used as part of the schema for any OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Checks to see if anyOf is being used as part of each schema.",
      "message": "You should avoid using anyOf as part of your schema.",
      "given": "$.paths.*.*[responses]..content..schema",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "anyOf",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-use-of-response-schema-anyof.md?ref=main",
    "github_sha": "07657c4db444fbd3454f4707d520eb04e1b0a8ce",
    "collection_id": "12959542-dd659f38-dcce-47b6-bf8b-bc6c33b35e46"
  },
  {
    "name": "OpenAPI V3 - Responses Examples",
    "slug": "openapi-v3-responses-examples",
    "summary": "This is a Spectral governance rule to make sure that all responses have examples in an OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Responses",
      "Examples"
    ],
    "rule": {
      "description": "Ensuring all responses have examples defined.",
      "message": "All your responses need to have examples defined.",
      "severity": "error",
      "given": "$..responses..[?(@property !== 'properties' && @.examples)]",
      "then": {
        "function": "schemaPath",
        "functionOptions": {
          "field": "$.examples.*.value",
          "schemaPath": "$.schema"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-responses-examples.md?ref=main",
    "github_sha": "6b72d7e180a1f6d27bf27a5178e61e7d4458b9e9",
    "collection_id": "12959542-3e5834d3-55f1-40f4-8b02-3cd197171054"
  },
  {
    "name": "OpenAPI V3 - Response Rate Limit Headers",
    "slug": "openapi-v3-response-rate-limit-headers",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI possesses rate limit headers. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Headers",
      "Rate Limit",
      "Security"
    ],
    "rule": {
      "description": "Ensures that all OpenAPIs have rate limiting headers applied.",
      "message": "You need to be using rate limiting headers.",
      "formats": [
        "oas3"
      ],
      "severity": "warn",
      "recommended": true,
      "given": "$.[responses][?(@property[0] == \"2\" )][headers]",
      "then": [
        {
          "functionOptions": {
            "properties": [
              "X-RateLimit-Limit",
              "RateLimit-Limit"
            ]
          },
          "function": "xor"
        },
        {
          "functionOptions": {
            "properties": [
              "X-RateLimit-Remaining",
              "RateLimit-Remaining"
            ]
          },
          "function": "xor"
        },
        {
          "functionOptions": {
            "properties": [
              "X-RateLimit-Reset",
              "RateLimit-Reset"
            ]
          },
          "function": "xor"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-response-rate-limit-headers.md?ref=main",
    "github_sha": "d54758cdf7223f71adae0c25393a84016d34d7a2",
    "collection_id": "12959542-9ed47003-2f28-4a06-9741-04b059452ba5"
  },
  {
    "name": "OpenAPI V3 - Schema Names Length",
    "slug": "openapi-v3-schema-names-length",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an OpenAPI are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensure schema names should be no more than 25 characters.",
      "message": "All schema names should be less than 25 characters.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-names-length.md?ref=main",
    "github_sha": "8998ed7a6f293e1ed70dace6ad4aea8b00000a17",
    "collection_id": "12959542-ec9799a7-6be2-4fce-bc89-fc369b16c787"
  },
  {
    "name": "OpenAPI V3 - Schema Names Camel Case",
    "slug": "openapi-v3-schema-names-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an OpenAPI are camel case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are camel case.",
      "message": "Schema names should be camel case.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-names-camel-case.md?ref=main",
    "github_sha": "b658e3425c5b01990ee9b7b34325db0501ae95f3",
    "collection_id": "12959542-f0a1aa40-1413-402e-8894-f2ef39d266c3"
  },
  {
    "name": "OpenAPI V3 - Schema Names Pascal Case",
    "slug": "openapi-v3-schema-names-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an OpenAPI are pascal case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are pascal case.",
      "message": "Schema names should be pascal case.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-names-pascal-case.md?ref=main",
    "github_sha": "13e6725ee902f5e8fa4986800b6114c6c9494dea",
    "collection_id": "12959542-e37c9db2-dbc8-42a8-bde3-a12efcf9f593"
  },
  {
    "name": "OpenAPI V3 - Schema Names Snake Case",
    "slug": "openapi-v3-schema-names-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an OpenAPI are snake case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are snake case.",
      "message": "Schema names should be snake case.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-names-snake-case.md?ref=main",
    "github_sha": "bd3818cd5b141d3716e5d3ff49c0d5a24b9c3995",
    "collection_id": "12959542-d8a4ac28-fcf6-4aa5-932c-476d21403170"
  },
  {
    "name": "OpenAPI V3 - Schema Names Words",
    "slug": "openapi-v3-schema-names-words",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in schema names within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Words"
    ],
    "rule": {
      "description": "Schema names should not contain certain words.",
      "message": "Schema property names not contains the words word, word, and word.",
      "severity": "error",
      "given": "$.components.schemas",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-names-words.md?ref=main",
    "github_sha": "014a4a3b769a53502e8adee27883f399c7860653",
    "collection_id": "12959542-321c4f17-ef83-4bba-958f-3edef977b2a0"
  },
  {
    "name": "OpenAPI V3 - Schema Description",
    "slug": "openapi-v3-schema-description",
    "summary": "This is a Spectral governance rule to make sure that all schema in an OpenAPI have a description.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensure all schema properties should have a description.",
      "message": "All schema should have descriptions.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-description.md?ref=main",
    "github_sha": "44f401bea1562e7179081bbe3b142dd1da2015da",
    "collection_id": "12959542-b22aa1ec-b889-46ee-ac6e-17e01f7bde16"
  },
  {
    "name": "OpenAPI V3 - Schema Description Length",
    "slug": "openapi-v3-schema-description-length",
    "summary": "This is a Spectral governance rule to make sure that all schema in an OpenAPI do not have too long of descriptions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "All schemas descriptions should be shorter than 20 characters.",
      "message": "Description needs to be less than 20 characters.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 20
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-description-length.md?ref=main",
    "github_sha": "8c326393ae151675b17e8612f846803fe9765e39",
    "collection_id": "12959542-c057a780-7cef-4ca9-98ce-eed195be102f"
  },
  {
    "name": "OpenAPI V3 - Schema Description Words",
    "slug": "openapi-v3-schema-description-words",
    "summary": "This is a Spectral governance rule to make sure that all schema in an OpenAPI do not contain certain words within the description.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Some words should not be be contained within the schema description.",
      "message": "Do not use the words word, word, and word in the schema descriptions.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-description-words.md?ref=main",
    "github_sha": "72e36d236ec843bde9b05abf628f97e9101bd0a3",
    "collection_id": "12959542-318c630c-7b2e-4398-943c-6d4e559ee5b2"
  },
  {
    "name": "OpenAPI V3 - Schema Properties",
    "slug": "openapi-v3-schema-properties",
    "summary": "This is a Spectral governance rule to make sure that all schema have properties within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema should have properties.",
      "message": "All of your schema need to have properties.",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "properties",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties.md?ref=main",
    "github_sha": "828580c24a8b87b141a6abdf0a121fee015cdc6c",
    "collection_id": "12959542-4da15e33-a84f-4bee-be32-7a39b0368505"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Descriptions Length",
    "slug": "openapi-v3-schema-properties-descriptions-length",
    "summary": "This is a Spectral governance rule to make sure that schema property descriptions are too long within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensure that schema descriptions aren't too long.",
      "message": "The schema description length needs to be less than 250 characters.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-descriptions-length.md?ref=main",
    "github_sha": "f0e4014023810bfe47f69d1a63ce0141c46faefd",
    "collection_id": "12959542-a4d5a85a-9c7d-447a-8e88-d4ff90a8760a"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Descriptions Words",
    "slug": "openapi-v3-schema-properties-descriptions-words",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in schema property descriptions within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Some words should not exist within the property description.",
      "message": "Schema property descriptions should not contain the words word, word, and word.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-descriptions-words.md?ref=main",
    "github_sha": "859e8080fe664826d976d0810ad7597bff58ddde",
    "collection_id": "12959542-637876da-2af5-47c3-be49-d0bf2ffc3139"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Descriptions",
    "slug": "openapi-v3-schema-properties-descriptions",
    "summary": "This is a Spectral governance rule to make sure that all schema properties have descriptions within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensure that all schemas properties should have a description.",
      "message": "All schema properties should have descriptions.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$..properties.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-descriptions.md?ref=main",
    "github_sha": "f219267eaac1396c6cd5ea562b6eeb2cbf904c1a",
    "collection_id": "12959542-a07c1a6b-7f75-494a-8c69-319c2767c887"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Names Length",
    "slug": "openapi-v3-schema-properties-names-length",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are not too long within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensuring that property names are no more than 25 characters.",
      "message": "Schema property names should be less than 25 characters .",
      "severity": "error",
      "given": "$..properties.*",
      "then": {
        "field": "@key",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-names-length.md?ref=main",
    "github_sha": "4e2aa2ddcf3aec5a59da6bee833904730fe02be3",
    "collection_id": "12959542-03b6ec90-3287-49cc-b733-f82fa71aa24b"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Names Camel Case",
    "slug": "openapi-v3-schema-properties-names-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are camel case within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are camel case.",
      "message": "All schema property names should be camel case.",
      "severity": "error",
      "given": "$..properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-names-camel-case.md?ref=main",
    "github_sha": "021b046362f67223bba903a24a7c5e778440aeb9",
    "collection_id": "12959542-48a74f86-0b0b-4d53-b9b0-3cd97d5d02d1"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Names Pascal Case",
    "slug": "openapi-v3-schema-properties-names-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are pascal case within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are pascal case.",
      "message": "All schema property names should be pascal case.",
      "severity": "error",
      "given": "$..properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-names-pascal-case.md?ref=main",
    "github_sha": "ef6064e0b28a4e27b2ea4c624fdfc5ce85423254",
    "collection_id": "12959542-520ce3af-2162-42ee-9746-59bf73f557e7"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Names Snake Case",
    "slug": "openapi-v3-schema-properties-names-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are snake case within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are snake case.",
      "message": "All schema property names should be snake case.",
      "severity": "error",
      "given": "$..properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-names-snake-case.md?ref=main",
    "github_sha": "7a98912a8ac93f7e813364d811529353c0ebde00",
    "collection_id": "12959542-c0fd0e59-5508-4c75-9a39-e68f13bebb0e"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Names Words",
    "slug": "openapi-v3-schema-properties-names-words",
    "summary": "This is a Spectral governance rule to make sure that some words are not used for schema property names within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Words"
    ],
    "rule": {
      "description": "Schema property names should not contain certain words.",
      "message": "Schema property names should not contain the words word, word, and word.",
      "severity": "error",
      "given": "$..properties.*",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-names-words.md?ref=main",
    "github_sha": "e36433437db2cda2cc233b04c20aefb6a256d11c",
    "collection_id": "12959542-e9c37b08-971a-4b58-b663-72e909fb8e80"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Type",
    "slug": "openapi-v3-schema-properties-type",
    "summary": "This is a Spectral governance rule to make sure that schema properties have a type defined within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schemas properties should have a type.",
      "message": "All schema properties should have type property.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$..properties.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-type.md?ref=main",
    "github_sha": "ab8104fb53639feaeec0674494b72777ce96e3f1",
    "collection_id": "12959542-ee1b7d48-725e-41eb-aa81-a6f57812a4cd"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Allowed Integer Format",
    "slug": "openapi-v3-schema-properties-allowed-integer-format",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI properties that use integer type have a format of int32 or int64. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers",
      "Formats"
    ],
    "rule": {
      "description": "Requires integer properties to have a format of int32 or int64.",
      "message": "Type format should be be int32 or int64.",
      "formats": [
        "oas3"
      ],
      "severity": "hint",
      "recommended": true,
      "given": "$..properties.[?(@.type==\"integer\")]",
      "then": {
        "field": "format",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "int32",
            "int64"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-allowed-integer-format.md?ref=main",
    "github_sha": "5a68f609a3eb094e9b2eb0b655c5d3d62a4b7365",
    "collection_id": "12959542-1c57d439-f833-49ce-bd58-6d2378954a09"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Allowed Number Format",
    "slug": "openapi-v3-schema-properties-allowed-number-format",
    "summary": "This is a Spectral governance rule to enforce that OpenAPI properties that use number type have a format of decimal32, decimal64, float, double, or decimal128. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers",
      "Formats"
    ],
    "rule": {
      "description": "Ensure only allowed number formats.",
      "message": "You must have format property of decimal32, decimal64, float, double, decimal128",
      "formats": [
        "oas3"
      ],
      "severity": "hint",
      "recommended": true,
      "given": "$..properties.[?(@.type==\"number\")]",
      "then": {
        "field": "format",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "decimal32",
            "decimal64",
            "float",
            "double",
            "decimal128"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-allowed-number-format.md?ref=main",
    "github_sha": "9650c26f59adabd452193375cb9209e1ab13f8e0",
    "collection_id": "12959542-2d9d89fb-4f51-48c5-a4c9-5244e0c35a52"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Define Array Boundaries",
    "slug": "openapi-v3-schema-properties-define-array-boundaries",
    "summary": "This is a Spectral governance rule to enforce that arrays in an OpenAPI always have minimum and maximum boundaries define, preventing these properties from being overloaded. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tag",
      "Arrays",
      "Security"
    ],
    "rule": {
      "description": "Requires that arrays have their minimum and maximum boundaries defined.",
      "message": "Arrays must have minItems and maxItems defined.",
      "formats": [
        "oas3"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$..properties.[?(@.type==\"array\")]"
      ],
      "then": [
        {
          "field": "maxItems",
          "function": "defined"
        },
        {
          "field": "minItems",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-define-array-boundaries.md?ref=main",
    "github_sha": "81c230f7490506ab4fffd25c28711431babdc6f3",
    "collection_id": "12959542-9129d8bc-142e-40a6-904d-30135b460a89"
  },
  {
    "name": "OpenAPI V3 - Schema Properties Define Number Boundaries",
    "slug": "openapi-v3-schema-properties-define-number-boundaries",
    "summary": "This is a Spectral governance rule to enforce that the numeric properties within an OpenAPI all have boundaries defined. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers"
    ],
    "rule": {
      "description": "Ensures that all number properties have boundaries defined.",
      "message": "Numeric types need to have a minimum and maximum property defined.",
      "formats": [
        "oas3"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$..properties.[?(@.type==\"number\")]",
        "$..properties.[?(@.type==\"integer\")]"
      ],
      "then": [
        {
          "field": "maximum",
          "function": "defined"
        },
        {
          "field": "minimum",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-properties-define-number-boundaries.md?ref=main",
    "github_sha": "d0a749ff246b0a101e2dac443eaad9d63047cae4",
    "collection_id": "12959542-7eaa0b61-c037-4a65-85a7-2c42a3720eac"
  },
  {
    "name": "OpenAPI V3 - Schema Required",
    "slug": "openapi-v3-schema-required",
    "summary": "This is a Spectral governance rule to make sure that all schema have a required property within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema have a required property.",
      "message": "All of your schema need to have a required property.",
      "severity": "warn",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "required",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-required.md?ref=main",
    "github_sha": "d095a359247827b24b257d3abc05ec3bf158ab62",
    "collection_id": "12959542-0eb81bb2-e9e1-433b-81c0-ecb3b0d0cad7"
  },
  {
    "name": "OpenAPI V3 - Schema Type",
    "slug": "openapi-v3-schema-type",
    "summary": "This is a Spectral governance rule to make sure that all schema have a required property within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema have a type property.",
      "message": "All schema should have a type property.",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "given": "$.components.schemas.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-type.md?ref=main",
    "github_sha": "56447d23a4003061ec3b94475016ca8e7f687c89",
    "collection_id": "12959542-ef4cd4b8-6ce1-4c01-99d5-f4f504110d52"
  },
  {
    "name": "OpenAPI V3 - Schema Additional Properties",
    "slug": "openapi-v3-schema-additional-properties",
    "summary": "This is a Spectral governance rule to enforce that schema objects do not have additional properties enabled for each OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Restricts objects from having additional properties defined.",
      "message": "All schema objects should have additionalProperties set to false.",
      "formats": [
        "oas3"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$.[?(@.type==\"object\" && @.additionalProperties && @.additionalProperties!=true && @.additionalProperties!=false )]"
      ],
      "then": [
        {
          "field": "maxProperties",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-schema-additional-properties.md?ref=main",
    "github_sha": "dbe3cac3e287168fa926bf550cd3baef43a95287",
    "collection_id": "12959542-add3ba84-cee5-4636-b9e2-dd36a66fa938"
  },
  {
    "name": "OpenAPI V3 - Tags Name",
    "slug": "openapi-v3-tags-name",
    "summary": "This is a Spectral governance rule to make sure that all tags have a name within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that all tags have a name.",
      "message": "All tags should have a name.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-tags-name.md?ref=main",
    "github_sha": "d4473a73829d4076f42fff05f1e114647e84257d",
    "collection_id": "12959542-b00be978-5109-4c22-9ee9-143e858614a4"
  },
  {
    "name": "OpenAPI V3 - Tags Object",
    "slug": "openapi-v3-tags-object",
    "summary": "This is a Spectral governance rule to make sure that there is a central tag object within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that there are tags being applied.",
      "message": "You should have a central tags object.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-tags-object.md?ref=main",
    "github_sha": "6bdf91e650e84db9a9992f1fa48b9f085d861698",
    "collection_id": "12959542-f1877929-56b2-45f0-940c-a260e4efd481"
  },
  {
    "name": "OpenAPI V3 - Tags One",
    "slug": "openapi-v3-tags-one",
    "summary": "This is a Spectral governance rule to make sure that there is at least one tag within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that there is at least on tag being applied.",
      "message": "You should have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-tags-one.md?ref=main",
    "github_sha": "e9df3412a775b53857a99cc6a12b09e1a7e18e84",
    "collection_id": "12959542-f3bd881c-c327-486a-b203-6a14455eb56e"
  },
  {
    "name": "OpenAPI V3 - Tags Description",
    "slug": "openapi-v3-tags-description",
    "summary": "This is a Spectral governance rule to make sure that all tags have a description within OpenAPI definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that all tags have a description.",
      "message": "All tags should have a description.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-tags-description.md?ref=main",
    "github_sha": "5fc59346fb0890070d5fa0508b5a16a87b52b57c",
    "collection_id": "12959542-6576c113-5a90-47e5-bfcd-fc2995e5ccb7"
  },
  {
    "name": "OpenAPI V3 Components Parameters Camel Case",
    "slug": "openapi-v3-components-parameters-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI parameters within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components parameters are using camel case for the name.",
      "message": "The component parameters name needs to be camelCase.",
      "given": "$.components.parameters..[?(@.in==='query' || @.in==='path' || @.in==='cookie')]",
      "severity": "warn",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-parameters-camel-case.md?ref=main",
    "github_sha": "5fa61c3089ec3fb32d007ebde83650384dec5af9",
    "collection_id": "12959542-2290fe67-938d-47dd-b5ce-f2bf2989c30f"
  },
  {
    "name": "OpenAPI V3 Components Examples Camel Case",
    "slug": "openapi-v3-components-examples-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI example within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Examples",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components example are using camel case for the key.",
      "message": "The component example key needs to be camelCase.",
      "given": "$.components.examples",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-examples-camel-case.md?ref=main",
    "github_sha": "03c26c7deceb8847f7db4107d48e8e4b1e1acf35",
    "collection_id": "12959542-b639c35d-a583-4cf3-a74a-f7b5bbd44d32"
  },
  {
    "name": "OpenAPI V3 Components Request Bodies Camel Case",
    "slug": "openapi-v3-components-request-bodies-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request bodies within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components request bodies are using camel case for the key.",
      "message": "The component request bodies key needs to be camelCase.",
      "given": "$.components.requestBodies",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-request-bodies-camel-case.md?ref=main",
    "github_sha": "377f7341c8c568de5f65f0de7324ff576fcc84a8",
    "collection_id": "12959542-5606f026-51f0-4be9-9f06-c0ca09bb16bd"
  },
  {
    "name": "OpenAPI V3 Components Schemas Camel Case",
    "slug": "openapi-v3-components-schemas-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI schemas within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Schemas",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components schemas are using camel case for the name.",
      "message": "The component schemas name needs to be camelCase.",
      "given": "$.components.schemas",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-schemas-camel-case.md?ref=main",
    "github_sha": "276c9e45d545f76e981030a43cb4ad204ec4b201",
    "collection_id": "12959542-5e08f537-cfb1-494f-9b15-44f70fdc2786"
  },
  {
    "name": "OpenAPI V3 Components Responses Camel Case",
    "slug": "openapi-v3-components-responses-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI responses within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components responses are using camel case for the name.",
      "message": "The component responses name needs to be camelCase.",
      "given": "$.components.responses",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-responses-camel-case.md?ref=main",
    "github_sha": "b0cefdad0db56bc02bfdb0e420e783d0edbfcd31",
    "collection_id": "12959542-3fc52aba-b651-4742-88f3-8b6eba1e0c07"
  },
  {
    "name": "OpenAPI V3 Components Links Camel Case",
    "slug": "openapi-v3-components-links-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI links within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Links",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components links are using camel case for the key.",
      "message": "The component links key needs to be camelCase.",
      "given": "$.components.links",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-links-camel-case.md?ref=main",
    "github_sha": "553865b70f51b323ba242c290cfeab8f7ca4a838",
    "collection_id": "12959542-8e4b6449-5754-4225-978f-0d8f45b268a9"
  },
  {
    "name": "OpenAPI V3 Components Callbacks Camel Case",
    "slug": "openapi-v3-components-callbacks-camel-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI callbacks within the components object are all using camel case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Callbacks",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components callbacks are using camel case for the key.",
      "message": "The component callback key needs to be camelCase.",
      "given": "$.components.callbacks",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-callbacks-camel-case.md?ref=main",
    "github_sha": "19a77272a319b28e379a80181e747f84d792b68c",
    "collection_id": "12959542-68441e98-4f03-4fc4-a85e-f3f0458c1f50"
  },
  {
    "name": "OpenAPI V3 Components Parameters Pascal Case",
    "slug": "openapi-v3-components-parameters-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI parameters within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components parameters are using pascal case for the name.",
      "message": "The component parameters name needs to be pascalCase.",
      "given": "$.components.parameters..[?(@.in==='query' || @.in==='path' || @.in==='cookie')]",
      "severity": "warn",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-parameters-pascal-case.md?ref=main",
    "github_sha": "3e0ce8f23bb02c2896fdf5dfe36313c6a41f2901",
    "collection_id": "12959542-28adc4a1-f3c2-4261-9fd2-5bc6783c3313"
  },
  {
    "name": "OpenAPI V3 Components Examples Pascal Case",
    "slug": "openapi-v3-components-examples-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI example within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Examples",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components example are using pascal case for the key.",
      "message": "The component example key needs to be pascalCase.",
      "given": "$.components.examples",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-examples-pascal-case.md?ref=main",
    "github_sha": "cb29601638fa89021f5fc394265d4d184ec410f2",
    "collection_id": "12959542-d23a499f-a2aa-45cd-8d58-1fcad7d0ce6e"
  },
  {
    "name": "OpenAPI V3 Components Request Bodies Pascal Case",
    "slug": "openapi-v3-components-request-bodies-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request bodies within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components request bodies are using pascal case for the key.",
      "message": "The component request bodies key needs to be pascalCase.",
      "given": "$.components.requestBodies",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-request-bodies-pascal-case.md?ref=main",
    "github_sha": "f07c737ffa37a1c5aceb25a78b9aa3f609cb8987",
    "collection_id": "12959542-4790cff2-4d1b-49db-9517-5ec937cc5531"
  },
  {
    "name": "OpenAPI V3 Components Schemas Pascal Case",
    "slug": "openapi-v3-components-schemas-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI schemas within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Schemas",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components schemas are using pascal case for the name.",
      "message": "The component schemas name needs to be pascalCase.",
      "given": "$.components.schemas",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-schemas-pascal-case.md?ref=main",
    "github_sha": "84df6dddfeb13de45faa8ed286cb1538da8c5be3",
    "collection_id": "12959542-378821f3-1790-40a4-9069-a2f013b41b22"
  },
  {
    "name": "OpenAPI V3 Components Responses Pascal Case",
    "slug": "openapi-v3-components-responses-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI responses within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components responses are using pascal case for the name.",
      "message": "The component responses name needs to be pascalCase.",
      "given": "$.components.responses",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-responses-pascal-case.md?ref=main",
    "github_sha": "3ff92e95c67f977e340b95e90e52c0123af72421",
    "collection_id": "12959542-1a5ebeff-1c91-4701-b291-a69cdaa852af"
  },
  {
    "name": "OpenAPI V3 Components Links Pascal Case",
    "slug": "openapi-v3-components-links-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI links within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Links",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components links are using pascal case for the key.",
      "message": "The component links key needs to be pascalCase.",
      "given": "$.components.links",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-links-pascal-case.md?ref=main",
    "github_sha": "ffea466789411f7b6f3da2ed1d4d6d9fc374544b",
    "collection_id": "12959542-bb176dec-a9cc-400f-9302-58af4833ecb8"
  },
  {
    "name": "OpenAPI V3 Components Callbacks Pascal Case",
    "slug": "openapi-v3-components-callbacks-pascal-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI callbacks within the components object are all using pascal case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Callbacks",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components callbacks are using pascal case for the key.",
      "message": "The component callback key needs to be pascalCase.",
      "given": "$.components.callbacks",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-callbacks-pascal-case.md?ref=main",
    "github_sha": "299a483de850124b8d008aaca30b3bb6fd989d6b",
    "collection_id": "12959542-bf5523d7-98ed-4100-9254-6ec3aadcd694"
  },
  {
    "name": "OpenAPI V3 Components Parameters Kebab Case",
    "slug": "openapi-v3-components-parameters-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI parameters within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components parameters are using kebab case for the name.",
      "message": "The component parameters name needs to be kebabCase.",
      "given": "$.components.parameters..[?(@.in==='query' || @.in==='path' || @.in==='cookie')]",
      "severity": "warn",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-parameters-kebab-case.md?ref=main",
    "github_sha": "2c7130f897eda59b7d7c153b04c6d50ca067d1a2",
    "collection_id": "12959542-dbc7c7e8-041f-4302-a4b3-1b9ffb263573"
  },
  {
    "name": "OpenAPI V3 Components Examples Kebab Case",
    "slug": "openapi-v3-components-examples-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI example within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Examples",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components example are using kebab case for the key.",
      "message": "The component example key needs to be kebabCase.",
      "given": "$.components.examples",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-examples-kebab-case.md?ref=main",
    "github_sha": "f64a134b82186b5c587b295861002beea8c46938",
    "collection_id": "12959542-df25ca6d-5cbc-403a-91c0-e79f1e87d9bb"
  },
  {
    "name": "OpenAPI V3 Components Request Bodies Kebab Case",
    "slug": "openapi-v3-components-request-bodies-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request bodies within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components request bodies are using kebab case for the key.",
      "message": "The component request bodies key needs to be kebabCase.",
      "given": "$.components.requestBodies",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-request-bodies-kebab-case.md?ref=main",
    "github_sha": "a7531b397c841a346c310fc24794202bd0609b3d",
    "collection_id": "12959542-d1b80668-600f-4797-8032-7325ab7a37d1"
  },
  {
    "name": "OpenAPI V3 Components Schemas Kebab Case",
    "slug": "openapi-v3-components-schemas-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI schemas within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Schemas",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components schemas are using kebab case for the name.",
      "message": "The component schemas name needs to be kebabCase.",
      "given": "$.components.schemas",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-schemas-kebab-case.md?ref=main",
    "github_sha": "8e483c79c966482c4f2cdec222864f152b1851ff",
    "collection_id": "12959542-8a0445de-c136-4aaf-b007-76e76b090ff0"
  },
  {
    "name": "OpenAPI V3 Components Responses Kebab Case",
    "slug": "openapi-v3-components-responses-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI responses within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components responses are using kebab case for the name.",
      "message": "The component responses name needs to be kebabCase.",
      "given": "$.components.responses",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-responses-kebab-case.md?ref=main",
    "github_sha": "cf8bd386479372939c0c845f38a7c0b532fc5cae",
    "collection_id": "12959542-90799570-1ded-4c11-acaa-1b373bca3931"
  },
  {
    "name": "OpenAPI V3 Components Links Kebab Case",
    "slug": "openapi-v3-components-links-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI links within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Links",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components links are using kebab case for the key.",
      "message": "The component links key needs to be kebabCase.",
      "given": "$.components.links",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-links-kebab-case.md?ref=main",
    "github_sha": "ba64da41a0375cdb3b6ec6d3d5ec75ca9beb8062",
    "collection_id": "12959542-757cc918-cc2e-4034-b214-fc2315b09c44"
  },
  {
    "name": "OpenAPI V3 Components Callbacks Kebab Case",
    "slug": "openapi-v3-components-callbacks-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI callbacks within the components object are all using kebab case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Callbacks",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components callbacks are using kebab case for the key.",
      "message": "The component callback key needs to be kebabCase.",
      "given": "$.components.callbacks",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-callbacks-kebab-case.md?ref=main",
    "github_sha": "7763589d593cb3998958398ff8f4bb51eb8a4068",
    "collection_id": "12959542-05285187-5dbc-4e1c-8477-c98326998831"
  },
  {
    "name": "OpenAPI V3 Components Parameters Snake Case",
    "slug": "openapi-v3-components-parameters-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI parameters within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components parameters are using snake case for the name.",
      "message": "The component parameters name needs to be snakeCase.",
      "given": "$.components.parameters..[?(@.in==='query' || @.in==='path' || @.in==='cookie')]",
      "severity": "warn",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-parameters-snake-case.md?ref=main",
    "github_sha": "6aaea88c83377b8fe941c79cf2ed85ba0fe44c11",
    "collection_id": "12959542-a36d1702-59e2-4157-a4cd-f2605d367c91"
  },
  {
    "name": "OpenAPI V3 Components Examples Snake Case",
    "slug": "openapi-v3-components-examples-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI example within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Examples",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components example are using snake case for the key.",
      "message": "The component example key needs to be snakeCase.",
      "given": "$.components.examples",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-examples-snake-case.md?ref=main",
    "github_sha": "928ca2a27df3492deabc9788bc8a8462a6fa07ed",
    "collection_id": "12959542-6d3422f1-8ad0-4a15-9cae-8a99aa94263e"
  },
  {
    "name": "OpenAPI V3 Components Request Bodies Snake Case",
    "slug": "openapi-v3-components-request-bodies-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request bodies within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components request bodies are using snake case for the key.",
      "message": "The component request bodies key needs to be snakeCase.",
      "given": "$.components.requestBodies",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-request-bodies-snake-case.md?ref=main",
    "github_sha": "d3c0aab441b8f7f1f49830257ddaec85a9eb3b0a",
    "collection_id": "12959542-b6ff0832-aaa2-4b9b-b596-c95c6c70d2ff"
  },
  {
    "name": "OpenAPI V3 Components Schemas Snake Case",
    "slug": "openapi-v3-components-schemas-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI schemas within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Schemas",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components schemas are using snake case for the name.",
      "message": "The component schemas name needs to be snakeCase.",
      "given": "$.components.schemas",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-schemas-snake-case.md?ref=main",
    "github_sha": "72ddb8425b01e1e0aa56fe859d46e40a36930aa5",
    "collection_id": "12959542-9a9ada7f-73e8-49db-a4b4-1ea40ac0c2b7"
  },
  {
    "name": "OpenAPI V3 Components Responses Snake Case",
    "slug": "openapi-v3-components-responses-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI responses within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components responses are using snake case for the name.",
      "message": "The component responses name needs to be snakeCase.",
      "given": "$.components.responses",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-responses-snake-case.md?ref=main",
    "github_sha": "a0f29f184d87f1297973a247f9d5b49b6bc9a2d3",
    "collection_id": "12959542-a36b5622-5fca-4735-9807-5d2c9c1f2517"
  },
  {
    "name": "OpenAPI V3 Components Links Snake Case",
    "slug": "openapi-v3-components-links-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI links within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Links",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components links are using snake case for the key.",
      "message": "The component links key needs to be snakeCase.",
      "given": "$.components.links",
      "severity": "error",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-links-snake-case.md?ref=main",
    "github_sha": "fa57f40407b522214ec8a8d8d1f6397420e7a67f",
    "collection_id": "12959542-d3add4f0-85b5-4d82-a0c0-ff51a44cdfde"
  },
  {
    "name": "OpenAPI V3 Components Callbacks Snake Case",
    "slug": "openapi-v3-components-callbacks-snake-case",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI callbacks within the components object are all using snake case for the key. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Callbacks",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that all components callbacks are using snake case for the key.",
      "message": "The component callback key needs to be snakeCase.",
      "given": "$.components.callbacks",
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-components-callbacks-snake-case.md?ref=main",
    "github_sha": "2d1682009e7300caf38bb423fd50d415139d6771",
    "collection_id": "12959542-dd39dec7-a868-45c5-9e82-d1f335c4a552"
  },
  {
    "name": "OpenAPI V3 Request Body Schema Components",
    "slug": "openapi-v3-request-body-schema-components",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request body schema are all centralized as a component. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Schemas"
    ],
    "rule": {
      "description": "Check request body schena to ensure that they only have references to components.",
      "message": "Request body schema should only reference components.",
      "severity": "error",
      "resolved": false,
      "given": [
        "$..requestBody.content..*.schema.$ref"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "#/components/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-schema-components.md?ref=main",
    "github_sha": "bd9abb4d4f19b46ade98e3a58d1892227156d54d",
    "collection_id": "12959542-9fd411b5-a684-4299-83a8-c9d6f9d371fc"
  },
  {
    "name": "OpenAPI V3 Request Body Examples Components",
    "slug": "openapi-v3-request-body-examples-components",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI request body examples are all centralized as a component. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Request Bodies",
      "Examples"
    ],
    "rule": {
      "description": "Check request bodies examples to ensure that they only have references to components.",
      "message": "Request bodies examples should only reference components.",
      "severity": "error",
      "resolved": false,
      "given": [
        "$..requestBody.content..*.examples.$ref"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "#/components/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-request-body-examples-components.md?ref=main",
    "github_sha": "d9a8f6ef36656c8e9140e3adcc289c18f27c84fb",
    "collection_id": "12959542-f410eb16-6b97-425f-8aee-53b09e0fd749"
  },
  {
    "name": "OpenAPI V3 Responses Schema Components",
    "slug": "openapi-v3-responses-schema-components",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI response schema are all centralized as a component. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses"
    ],
    "rule": {
      "description": "Check response schema to ensure that they only have references to components.",
      "message": "Response schema should only reference components.",
      "severity": "error",
      "resolved": false,
      "given": [
        "$..responses.*.content..*.schema.$ref"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "#/components/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-responses-schema-components.md?ref=main",
    "github_sha": "ca992719c6edba74b665f471a46de35a9a2b2dae",
    "collection_id": "12959542-5f40fb28-8e85-4fd0-a3b1-b15e157fc5da"
  },
  {
    "name": "OpenAPI V3 Responses Examples Components",
    "slug": "openapi-v3-responses-examples-components",
    "summary": "This is a Spectral governance rule to enforce that the OpenAPI response examples are all centralized as a component. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Components",
      "Responses"
    ],
    "rule": {
      "description": "Check response examples to ensure that they only have references to components.",
      "message": "Response examples should only reference components.",
      "severity": "error",
      "resolved": false,
      "given": [
        "$..responses.*.content..*.examples.$ref"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "#/components/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-responses-examples-components.md?ref=main",
    "github_sha": "fa1744ccffd59d5558bbe864ed22f253fec14a3b",
    "collection_id": "12959542-687b94be-fec6-4eca-afc2-e82818911dd7"
  },
  {
    "name": "OpenAPI V3 Security Scheme Sigv4",
    "slug": "openapi-v3-security-scheme-sigv4",
    "summary": "This is a Spectral governance rule to enforce that Sigv4 security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of Sigv4 for security scheme.",
      "message": "Must add Sigv4 for security scheme.",
      "severity": "error",
      "given": "$..components.securitySchemes",
      "then": {
        "field": "sigv4",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-sigv4.md?ref=main",
    "github_sha": "92b801766a1835a2e17ce28f8387fee994c8014a",
    "collection_id": "12959542-da90b27c-bed1-430b-85bb-dc85a07d20ee"
  },
  {
    "name": "OpenAPI V3 Security Scheme Access Token",
    "slug": "openapi-v3-security-scheme-access-token",
    "summary": "This is a Spectral governance rule to enforce that access token security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of access token for security scheme.",
      "message": "Must add access token for security scheme.",
      "given": "$.components.securitySchemes[Oidc.AccessToken]",
      "severity": "error",
      "then": {
        "field": "type",
        "function": "pattern",
        "functionOptions": {
          "match": "^openIdConnect$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-access-token.md?ref=main",
    "github_sha": "3a6aacef6909c32214b4b4dc225e3e5f7054c469",
    "collection_id": "12959542-c06fbbcb-cbf9-4adf-8d89-0747ca9a5fef"
  },
  {
    "name": "OpenAPI V3 Security Scheme API Key",
    "slug": "openapi-v3-security-scheme-api-key",
    "summary": "This is a Spectral governance rule to enforce that API key security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of API key for security scheme.",
      "message": "Must add API key for security scheme.",
      "given": "$.components.securitySchemes[Keys.ClientId]",
      "severity": "error",
      "then": [
        {
          "field": "type",
          "function": "pattern",
          "functionOptions": {
            "match": "^apiKey$"
          }
        },
        {
          "field": "in",
          "function": "pattern",
          "functionOptions": {
            "match": "^header$"
          }
        },
        {
          "field": "name",
          "function": "pattern",
          "functionOptions": {
            "match": "^X-api-key$"
          }
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-api-key.md?ref=main",
    "github_sha": "61a1aaf5d0d7743eae6beec8cbfe9b04f54df753",
    "collection_id": "12959542-b5f136de-eef7-43eb-9174-920870ebe87d"
  },
  {
    "name": "OpenAPI V3 Security Scheme API Secret",
    "slug": "openapi-v3-security-scheme-api-secret",
    "summary": "This is a Spectral governance rule to enforce that API secret security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of API secret for security scheme.",
      "message": "Must add API secret for security scheme.",
      "given": "$.components.securitySchemes[Keys.ClientId]",
      "severity": "error",
      "then": [
        {
          "field": "type",
          "function": "pattern",
          "functionOptions": {
            "match": "^apiKey$"
          }
        },
        {
          "field": "in",
          "function": "pattern",
          "functionOptions": {
            "match": "^header$"
          }
        },
        {
          "field": "name",
          "function": "pattern",
          "functionOptions": {
            "match": "^X-api-secret$"
          }
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-api-secret.md?ref=main",
    "github_sha": "2ebd86e0db3045190b7aa37529e3b59e939b7ee6",
    "collection_id": "12959542-df94e4f7-3725-4d98-a882-0ca95fe8e35d"
  },
  {
    "name": "OpenAPI V3 Security Scheme Basic",
    "slug": "openapi-v3-security-scheme-basic",
    "summary": "This is a Spectral governance rule to enforce that basic security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of basic for security scheme.",
      "message": "Must add basic for security scheme.",
      "severity": "error",
      "given": "$.components.securitySchemes[*]",
      "then": {
        "field": "scheme",
        "function": "pattern",
        "functionOptions": null,
        "notMatch": "basic"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-basic.md?ref=main",
    "github_sha": "b27aec2d88ddbe9580d177a26eb17f7ecb1a52df",
    "collection_id": "12959542-84db1ab8-36bd-4478-8666-3d926871dd13"
  },
  {
    "name": "OpenAPI V3 Security Scheme OAuth Implicit",
    "slug": "openapi-v3-security-scheme-oauth-implicit",
    "summary": "This is a Spectral governance rule to enforce that OAuth implicit security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of oauth implicit for security scheme.",
      "message": "Must add oauth implicit for security scheme.",
      "recommended": true,
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "$.components.securitySchemes.[*].flows.implicit",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-oauth-implicit.md?ref=main",
    "github_sha": "dc85a66de5b56e1b5f9e2ec0ef2bc09eccd9cf4c",
    "collection_id": "12959542-f1248eb1-01a5-48e2-ac2f-1255eae99c17"
  },
  {
    "name": "OpenAPI V3 Security Scheme OAuth2 Password",
    "slug": "openapi-v3-security-scheme-oauth2-password",
    "summary": "This is a Spectral governance rule to enforce that OAuth2 implicit security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of OAuth2 password for security scheme.",
      "message": "Must add OAuth2 password implicit for security scheme.",
      "recommended": true,
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "$.components.securitySchemes.[*].flows.password",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-oauth2-password.md?ref=main",
    "github_sha": "f4dc61a79b1e79f9764955362efbb664ee3e6e74",
    "collection_id": "12959542-e2fc103f-02e2-4235-bcb8-82f80292df61"
  },
  {
    "name": "OpenAPI V3 Security Scheme OAuth",
    "slug": "openapi-v3-security-scheme-oauth",
    "summary": "This is a Spectral governance rule to enforce that OAuth security is applied to the OpenAPI. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of OAuth for security scheme.",
      "message": "Must add OAuth implicit for security scheme.",
      "recommended": true,
      "severity": "error",
      "formats": [
        "oas3"
      ],
      "type": "style",
      "given": "$",
      "then": {
        "field": "$.components.securitySchemes.[*].type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/openapi-v3-security-scheme-oauth.md?ref=main",
    "github_sha": "f006db688139a8d0f633320c15c9b6e21f072241",
    "collection_id": "12959542-d2f2341b-f0fd-4061-b59f-781b2ac24baa"
  },
  {
    "name": "Swagger V2 - Info Title",
    "slug": "swagger-v2-info-title",
    "summary": "This is a Spectral governance rule to enforce that Swagger has an info title. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object title.",
      "message": "The info object should have a title.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "title",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-title.md?ref=main",
    "github_sha": "0529ff8af9b8fd97e7d8ac104416091d5dbf5228",
    "collection_id": "12959542-91b484ad-7e73-40a8-9db2-03f6fb50a9e6"
  },
  {
    "name": "Swagger V2 - Info Title In Kebab Case",
    "slug": "swagger-v2-info-title-in-kebab-case",
    "summary": "This is a Spectral governance rule to enforce that Swagger info title is in kebab case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Title"
    ],
    "rule": {
      "description": "Ensures that all Swaggers information title are in Kebab case.",
      "message": "The info object title needs to be in Kebab case.",
      "given": "$.info.title",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[a-z][a-z0-9\\-]*$"
        }
      },
      "type": "style",
      "recommended": true,
      "formats": [
        "oas2",
        "oas2"
      ],
      "severity": "error"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-title-in-kebab-case.md?ref=main",
    "github_sha": "c50b48d17e272046c4d4ee9d3ded187842091e46",
    "collection_id": "12959542-a31ab21d-a3b1-402f-9655-65bb40e8849d"
  },
  {
    "name": "Swagger V2 - Info Title Max Length",
    "slug": "swagger-v2-info-title-max-length",
    "summary": "This is a Spectral governance rule to enforce that Swagger info title is under a maximum length. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Length"
    ],
    "rule": {
      "description": "Ensures that all Swaggers information titles are not longer than 50 characters.",
      "message": "The info object title should not be more than 50 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "title",
        "function": "length",
        "functionOptions": {
          "max": 50
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-title-max-length.md?ref=main",
    "github_sha": "c4f8312d458e4eb3a32afa2a6c904feb7dd37336",
    "collection_id": "12959542-94c55be8-5063-4f7c-b764-f8d6962c18e5"
  },
  {
    "name": "Swagger V2 - Info Title Word Check",
    "slug": "swagger-v2-info-title-word-check",
    "summary": "This is a Spectral governance rule to enforce that Swagger info title doesn't contain certain words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Filters",
      "Dictionaries"
    ],
    "rule": {
      "description": "Ensures that all Swaggers info object title do not contain certain words.",
      "message": "The info object title should not contain the words REST, Public, and Developer.",
      "given": "$.info.title",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-title-word-check.md?ref=main",
    "github_sha": "329f3ca4a0f1fccaf118dd1b1be9547ea571825e",
    "collection_id": "12959542-59cb8e63-568b-455e-9c46-d81c09af760e"
  },
  {
    "name": "Swagger V2 - Info Description Max Length",
    "slug": "swagger-v2-info-description-max-length",
    "summary": "This is a Spectral governance rule to enforce that an Swagger information object description meet a specific length requirement, making sure that descriptions aren't too long, and provide the precise right amount of information for consumers.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Length"
    ],
    "rule": {
      "description": "Ensures that all APIs descriptions are under a specific length.",
      "message": "The info object description should be less than 250 characters.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-description-max-length.md?ref=main",
    "github_sha": "ec14581ad82a984b8e7bbf807f2896cb9e6f6fbe",
    "collection_id": "12959542-2a8fb3ec-ad63-45cb-879b-872e82b45da8"
  },
  {
    "name": "Swagger V2 Info Description Word Check",
    "slug": "swagger-v2-info-description-word-check",
    "summary": "This is a Spectral governance rule to enforce that an Swagger information object description does not contain certain words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Filters",
      "Dictionaries"
    ],
    "rule": {
      "description": "Ensures that all APIs descriptions do not contain certain words.",
      "message": "The info object description cannot contain the words REST, public, developer.",
      "given": "$.info.description",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(REST|Public|Developer)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-description-word-check.md?ref=main",
    "github_sha": "851f8b89071720af91dedf7946ae00b70d92d75a",
    "collection_id": "12959542-75e2dcca-e812-4d42-8695-b13d899b66fa"
  },
  {
    "name": "Swagger V2 Info Description",
    "slug": "swagger-v2-info-description",
    "summary": "This is a Spectral governance rule to enforce that an Swagger has a description included as part of the information object, making sure there is as much detail about what an API does available for consumers. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Documentation"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information description.",
      "message": "The info object should have a description.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-description.md?ref=main",
    "github_sha": "cdb0b11fc87dd7cdc543e052c90c15ad1f9e8c88",
    "collection_id": "12959542-bcd6f925-0ac7-481b-a942-8042ce60b719"
  },
  {
    "name": "Swagger V2 - Info Contact",
    "slug": "swagger-v2-info-contact",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a contact. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact information.",
      "message": "API must have a contact information available.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "contact",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-contact.md?ref=main",
    "github_sha": "abf9fdbf47be307b2db410386b1a8b703a8c14a1",
    "collection_id": "12959542-a2ed6bd9-7e44-42bf-a146-d187260da246"
  },
  {
    "name": "Swagger V2 - Info Contact Email",
    "slug": "swagger-v2-info-contact-email",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a contact email. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact email.",
      "message": "API must have a contact email available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "email",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-contact-email.md?ref=main",
    "github_sha": "a274ba6f45b0986ecb102bb5b36ee424dbb79d21",
    "collection_id": "12959542-26f42cb7-0f87-472c-abbe-bc9fa913b37a"
  },
  {
    "name": "Swagger V2 - Info Contact Name",
    "slug": "swagger-v2-info-contact-name",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a contact name. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact name.",
      "message": "API must have a contact name available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-contact-name.md?ref=main",
    "github_sha": "4c9b2fa23d1085b5cd6ff4cc8531373ca2bb00d3",
    "collection_id": "12959542-d3bae007-b837-4a25-add4-099374abce28"
  },
  {
    "name": "Swagger V2 - Info Contact Url",
    "slug": "swagger-v2-info-contact-url",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a contact url. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Contact",
      "Communication"
    ],
    "rule": {
      "description": "Ensures that all APIs have contact URL.",
      "message": "API must have a contact URL available.",
      "given": "$.info.contact",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-contact-url.md?ref=main",
    "github_sha": "954ee97f35591a77a398d46c89f5e8ccaad6fd92",
    "collection_id": "12959542-f021356d-ae60-4274-a103-4eafcea53d1b"
  },
  {
    "name": "Swagger V2 - Info License",
    "slug": "swagger-v2-info-license",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "Licensing",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object license.",
      "message": "The info object should have a license.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "license",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-license.md?ref=main",
    "github_sha": "e6937f97e4b9abb6ab3399e0153af3af867acbf8",
    "collection_id": "12959542-10d54080-3a14-49c1-837b-8ac884ee5bb7"
  },
  {
    "name": "Swagger V2 - Info License Name",
    "slug": "swagger-v2-info-license-name",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a license name. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object license name.",
      "message": "The info object should have a license name.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-license-name.md?ref=main",
    "github_sha": "103bb7f9043ff4387ba4e557ba28ce5bd761f83a",
    "collection_id": "12959542-72599433-0ea0-4072-abcd-2d87e4c65058"
  },
  {
    "name": "Swagger V2 - Info License Url",
    "slug": "swagger-v2-info-license-url",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a license url. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object license url.",
      "message": "The info object should have a license url.",
      "given": "$.info.license",
      "severity": "error",
      "then": {
        "field": "url",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-license-url.md?ref=main",
    "github_sha": "7037ee8d8553e5f2debd64eda3424feb616ae163",
    "collection_id": "12959542-d35fe987-30eb-4efb-a833-2fbd579ae379"
  },
  {
    "name": "Swagger V2 - Info License Url Apache",
    "slug": "swagger-v2-info-license-url-apache",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has an Apache license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object license url for Apache.",
      "message": "The info object should have a license url for Apache.",
      "given": "$.info.license.url",
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "apache.org"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-license-url-apache.md?ref=main",
    "github_sha": "78da4bd6c8f199b3cc1e162697eb8c88587dce83",
    "collection_id": "12959542-bc52708a-5f3e-4474-9c97-618ba336b55c"
  },
  {
    "name": "Swagger V2 - Info License Url Mit",
    "slug": "swagger-v2-info-license-url-mit",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has an MIT license. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Info",
      "License",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object license url for MIT.",
      "message": "The info object should have a license url for MIT.",
      "given": "$.info.license.url",
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "mit.edu"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-license-url-mit.md?ref=main",
    "github_sha": "86fed23ba5ffd949abd1ff250ba55d79bacad4dc",
    "collection_id": "12959542-573d49b2-5c6e-46c4-ab4a-e44a3c242077"
  },
  {
    "name": "Swagger V2 - Info Terms Of Service",
    "slug": "swagger-v2-info-terms-of-service",
    "summary": "This is a Spectral governance rule to enforce that Swagger info object has a terms of service. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Terms of Service",
      "Legal"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object terms of service.",
      "message": "The info object should have a terms of service.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "termsOfService",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-terms-of-service.md?ref=main",
    "github_sha": "33c2573b99707444a9db562ba7ed65a3ac56497e",
    "collection_id": "12959542-e3f03fe0-c840-476f-87a2-7bab4283d2ec"
  },
  {
    "name": "Swagger V2 - Info X API Id",
    "slug": "swagger-v2-info-x-api-id",
    "summary": "This is a Spectral governance rule to enforce that the Swagger info has an API ID extension. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Unique ID",
      "Extensions"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object API ID extension.",
      "message": "The info object should have an API ID extension.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "then": {
        "field": "x-api-id",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-x-api-id.md?ref=main",
    "github_sha": "b0201681d2ec9350d3ad700eb0bdabc48888577f",
    "collection_id": "12959542-46180193-0959-4f5b-9e2e-0198582ac4e3"
  },
  {
    "name": "Swagger V2 - Info X Audience",
    "slug": "swagger-v2-info-x-audience",
    "summary": "This is a Spectral governance rule to enforce that the Swagger info has an audience extension. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Audience",
      "Extensions"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object audience extension.",
      "message": "The info object should have an audience extension.",
      "severity": "error",
      "given": "$.info",
      "then": {
        "field": "x-audience",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-x-audience.md?ref=main",
    "github_sha": "becc6c4690664be1ccf86b3373dadcb2e09306c7",
    "collection_id": "12959542-a04a34d6-b953-403f-9571-8c1c4da50004"
  },
  {
    "name": "Swagger V2 - Swagger Version",
    "slug": "swagger-v2-openapi-version",
    "summary": "This is a Spectral governance rule to make sure that a specific version of Swagger is being used. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that a specific version of Swagger is being used.",
      "message": "You do not have the right version of Swagger.",
      "severity": "error",
      "given": "$",
      "then": {
        "field": "swagger",
        "function": "pattern",
        "functionOptions": {
          "match": 2
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-openapi-version.md?ref=main",
    "github_sha": "c5264e0c69b80e5d80e8895d3eadcf0bc90d77a9",
    "collection_id": "12959542-53c4b6d5-6525-4d66-b6a6-fd173211e7bc"
  },
  {
    "name": "Swagger V2 - Info Version",
    "slug": "swagger-v2-info-version",
    "summary": "This is a Spectral governance rule to enforce that Swagger has an info version. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning",
      "Info"
    ],
    "rule": {
      "description": "Ensures that all Swaggers have a information object version.",
      "message": "The info object should have a version.",
      "given": "$.info",
      "severity": "error",
      "recommended": true,
      "type": "style",
      "formats": [
        "oas2"
      ],
      "then": {
        "field": "version",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-info-version.md?ref=main",
    "github_sha": "3a0b60ffecdd3c6e27b1386bc782e7975803ecf3",
    "collection_id": "12959542-bb0c8815-7c73-4d0f-a57b-acbab9bd2954"
  },
  {
    "name": "Swagger V2 - Version Date Format",
    "slug": "swagger-v2-version-date-format",
    "summary": "This is a Spectral governance rule to make sure that there is at data version applied within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that there is a data form version applied.",
      "message": "You need to have a date version format.",
      "severity": "error",
      "recommended": true,
      "given": "$.info.version",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^([0-9]{4}-[0-9]{2}-[0-9]{2})$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-version-date-format.md?ref=main",
    "github_sha": "cdb260580ac40acd363bfc16237b37f2596b2281",
    "collection_id": "12959542-187fbe17-643e-46ab-8c1f-bae0dbe557c5"
  },
  {
    "name": "Swagger V2 - Version Semantic",
    "slug": "swagger-v2-version-semantic",
    "summary": "An API governance linting rule to enforce that semantic versioning has been applied to an Swagger, making sure that all teams are using the same versioning patterns, and all APIs are being versioned.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring that semantic versioning is being used.",
      "message": "You need to provide a semantic version.",
      "severity": "error",
      "recommended": true,
      "given": "$.info.version",
      "then": {
        "function": "pattern",
        "functionOptions": null,
        "match": "^[0-9]+.[0-9]+.[0-9]+(-[a-z0-9+.-]+)?"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-version-semantic.md?ref=main",
    "github_sha": "7f69076c39e62afefe20f1ed940a969a731b0f02",
    "collection_id": "12959542-b5bbf66e-c0be-491f-b5f2-0de82c679f5e"
  },
  {
    "name": "Swagger V2 - Version Second Segment",
    "slug": "swagger-v2-version-segment-second",
    "summary": "This is a Spectral governance rule to make sure that the second segment of the path a version. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Versioning"
    ],
    "rule": {
      "description": "Ensuring the second path segment is a version like v1.",
      "message": "The second path segment should be the version.",
      "given": "$.paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "match": "^/[^/]+/v\\d+/.+$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-version-segment-second.md?ref=main",
    "github_sha": "92f493fb2a334eeb743e65dbce2be50998aad0f0",
    "collection_id": "12959542-c987a56f-745b-4b75-a3c0-f27e11b27b30"
  },
  {
    "name": "Swagger V2 HTTPS Only",
    "slug": "swagger-v2-https-only",
    "summary": "This is a Spectral governance rule to enforce that Swagger definition is only using HTTPS for the server protocol. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Servers",
      "Security",
      "Encryption"
    ],
    "rule": {
      "description": "Ensures that all APIs are only using HTTPS protocol as a transport.",
      "message": "You must only use HTTPS for the schemes.",
      "severity": "error",
      "formats": [
        "oas2"
      ],
      "type": "style",
      "given": "$.schemes",
      "then": {
        "function": "schema",
        "functionOptions": null,
        "schema": {
          "type": "string",
          "items": null,
          "enum": [
            "https"
          ],
          "maxItems": 1
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-https-only.md?ref=main",
    "github_sha": "7f4d79094082234ce1c10f85e13a56cabe95c31e",
    "collection_id": "12959542-9def5258-622b-4e7d-827e-abea51a231ff"
  },
  {
    "name": "Swagger V2 Produce JSON Media Type",
    "slug": "swagger-v2-produce-json-media-type",
    "summary": "This is a Spectral governance rule to make sure that a Swagger definition produces a application/json media type. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that an API produces application/json media type.",
      "message": "APIs should produce a application/json media type.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..consumes.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/json"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-produce-json-media-type.md?ref=main",
    "github_sha": "5fa688fc8f2bed9c62e5baf6e19cc489ac5aabeb",
    "collection_id": "12959542-eeef6fe8-d8de-4b2e-bb90-78a5b1842e88"
  },
  {
    "name": "Swagger V2 Produce XML Media Type",
    "slug": "swagger-v2-produce-xml-media-type",
    "summary": "This is a Spectral governance rule to make sure that a Swagger definition produces a application/xml media type. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that an API produces application/xml media type.",
      "message": "APIs should produce a application/xml media type.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..consumes.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/xml"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-produce-xml-media-type.md?ref=main",
    "github_sha": "1c7eb90613137d7032036b01e7e97d1a8dc33111",
    "collection_id": "12959542-21e70a43-d060-405a-9e73-67985a663f4d"
  },
  {
    "name": "Swagger V2 Consume JSON Media Type",
    "slug": "swagger-v2-consume-json-media-type",
    "summary": "This is a Spectral governance rule to enforce that a Swagger consumes application/json media types. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that application/json media types are able to be consumed.",
      "message": "The APIs should be able to consume application/json media types.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..consumes.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/json"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-consume-json-media-type.md?ref=main",
    "github_sha": "f9c6b105eaa5fe44d030f3fea47813bb098a480c",
    "collection_id": "12959542-73205074-f193-4612-aea4-4ac533eba3bb"
  },
  {
    "name": "Swagger V2 Consume XML Media Type",
    "slug": "swagger-v2-consume-xml-media-type",
    "summary": "This is a Spectral governance rule to enforce that a Swagger consumes application/xml media types. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that application/xml media types are able to be consumed.",
      "message": "The APIs should be able to consume application/xml media types.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..consumes.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/xml"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-consume-xml-media-type.md?ref=main",
    "github_sha": "2d3ae63c28a3b641562e645448441ef4f465d437",
    "collection_id": "12959542-4b2f25a7-c27e-4c01-8cfd-7a1726690f0f"
  },
  {
    "name": "Swagger V2 Produce JSON Media Type",
    "slug": "swagger-v2-produce-json-media-type",
    "summary": "This is a Spectral governance rule to enforce that a Swagger produces application/json media types. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that application/json media types are able to be produced.",
      "message": "The APIs should be able to produce application/json media types.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..produces.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/json"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-produce-json-media-type.md?ref=main",
    "github_sha": "764801e572cd2af0cc0712bfc8934bde19b7f6bd",
    "collection_id": "12959542-eeef6fe8-d8de-4b2e-bb90-78a5b1842e88"
  },
  {
    "name": "Swagger V2 Produce XML Media Type",
    "slug": "swagger-v2-produce-xml-media-type",
    "summary": "This is a Spectral governance rule to enforce that a Swagger produces application/xml media types. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Media Type"
    ],
    "rule": {
      "description": "Ensures that application/xml media types are able to be produced.",
      "message": "The APIs should be able to produce application/xml media types.",
      "severity": "error",
      "recommended": true,
      "format": "oas2",
      "given": "$..produces.*",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "application/xml"
            ]
          }
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-produce-xml-media-type.md?ref=main",
    "github_sha": "f1b20bfa4627f03dc473c5c300f7156fa97e7908",
    "collection_id": "12959542-21e70a43-d060-405a-9e73-67985a663f4d"
  },
  {
    "name": "Swagger V2 - Do Not Use API for Base Path",
    "slug": "swagger-v2-do-not-use-api-for-base-path",
    "summary": "This is a Spectral governance rule to make sure that /api is not used as base path in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that paths do not use /api as part of the base path.",
      "message": "You should not use /api as part of your base path.",
      "severity": "warn",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "^/api"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-do-not-use-api-for-base-path.md?ref=main",
    "github_sha": "9657bb65be35bd821e52ebb3120abf80987f5463",
    "collection_id": "12959542-5dbe9fc8-e008-4990-be79-9812c0e1aee7"
  },
  {
    "name": "Swagger V2 - No Path Dashes",
    "slug": "swagger-v2-no-path-dashes",
    "summary": "This is a Spectral governance rule to make sure that paths should not contain dashes in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that paths do not contain dashes.",
      "message": "Your paths should not contain dashes.",
      "severity": "error",
      "recommended": true,
      "given": "$.paths[*]~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/-/"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-no-path-dashes.md?ref=main",
    "github_sha": "2907a985544bb1dd3a03bd3d1618e179bf2b9484",
    "collection_id": "12959542-7f3e04f0-da67-4093-a530-cc63a7c0da9f"
  },
  {
    "name": "Swagger V2 - No Empty Paths",
    "slug": "swagger-v2-no-empty-paths",
    "summary": "This is a Spectral governance rule to make sure that there are no empty paths in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are no empty paths.",
      "message": "There should be no empty paths.",
      "documentationUrl": "https://opensource.zalando.com/restful-api-guidelines/#136",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "//"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-no-empty-paths.md?ref=main",
    "github_sha": "a864173c419f5e4c209f21560df7468736cffebf",
    "collection_id": "12959542-5ba15fe4-e95b-49a6-88a5-723dfbcb229f"
  },
  {
    "name": "Swagger V2 - Limit Number of Paths",
    "slug": "swagger-v2-limit-number-of-paths",
    "summary": "This is a Spectral governance rule to make sure that there aren't too many paths in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are not too many paths.",
      "message": "There should be no more than 10 paths.",
      "severity": "warn",
      "given": "$.paths",
      "then": {
        "function": "count-resource-types",
        "functionOptions": {
          "max": 10
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-limit-number-of-paths.md?ref=main",
    "github_sha": "3698bcb63fd1aa9ed132d671ef68f00f5ca5738b",
    "collection_id": "12959542-d05debb6-d39d-4d77-a80c-cbe7aa56a38f"
  },
  {
    "name": "Swagger V2 - Limit Number of Sub-resources",
    "slug": "swagger-v2-limit-number-of-sub-resources",
    "summary": "This is a Spectral governance rule to make sure that there aren't too many sub-resources in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are not too many sub-resources.",
      "message": "There should be no more than three levels of sub-resources.",
      "severity": "warn",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^/[^/]*((/{[^}]*})*/[^/]*(/{[^}]*})*){0,3}/?$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-limit-number-of-sub-resources.md?ref=main",
    "github_sha": "828fcbc0eb74f29f8f77bb4537f65842969a51af",
    "collection_id": "12959542-8c03f764-b099-4aa8-9142-c768cc57f305"
  },
  {
    "name": "Swagger V2 - No Trailing Slash on Paths",
    "slug": "swagger-v2-no-trailing-slash-on-paths",
    "summary": "This is a Spectral governance rule to make sure that there are no trailing slashes on paths in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are no trailing slashes on paths.",
      "message": "There should be no trailing slashes on paths.",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-no-trailing-slash-on-paths.md?ref=main",
    "github_sha": "f7a73714bd986adbf247805b8e7335cf450a3c9e",
    "collection_id": "12959542-3fcf7777-0993-4650-85f1-cebae8784ea4"
  },
  {
    "name": "Swagger V2 - Trailing Slash on Paths",
    "slug": "swagger-v2-trailing-slash-on-paths",
    "summary": "This is a Spectral governance rule to make sure that there are trailing slashes on paths in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Paths"
    ],
    "rule": {
      "description": "Ensures that there are trailing slashes on paths.",
      "message": "There should be trailing slashes on paths.",
      "severity": "error",
      "given": "$.paths.*~",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "/$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-trailing-slash-on-paths.md?ref=main",
    "github_sha": "3b2b737c2ad71c592ce92acb06718a36fed423a4",
    "collection_id": "12959542-98564093-50fb-4710-a580-3c726be2f795"
  },
  {
    "name": "Swagger V2 Have GET Method",
    "slug": "swagger-v2-have-get-method",
    "summary": "Needs a summary.",
    "tags": [
      "Methods"
    ],
    "rule": {
      "description": "Ensures that all APIs at least have one GET method.",
      "message": "An API must have at least one GET method.",
      "formats": [
        "oas2"
      ],
      "given": "$.paths[/]",
      "severity": "warn",
      "then": {
        "field": "get",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-have-get-method.md?ref=main",
    "github_sha": "64212ae56ad715f6600ffc65715f2511455925fd",
    "collection_id": "12959542-5ae496fb-5e4b-4190-9c5c-caf8719b7d26"
  },
  {
    "name": "Swagger V2 - Operations Description Length",
    "slug": "swagger-v2-operations-description-length",
    "summary": "This is a Spectral governance rule to enforce the length of API operation descriptions within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Length"
    ],
    "rule": {
      "description": "Ensures that the description for operations are not too long.",
      "message": "Your operation descriptions should not be more than 250 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "description",
          "function": "length",
          "functionOptions": {
            "max": 250
          }
        }
      ],
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-description-length.md?ref=main",
    "github_sha": "9e6e0c16524a28c4f1b74092dd3ab2e9dca895d0",
    "collection_id": "12959542-e34b453a-769d-4d57-a17b-fed1d82c76f0"
  },
  {
    "name": "Swagger V2 - Operations Description Words Check",
    "slug": "swagger-v2-operations-description-words-check",
    "summary": "This is a Spectral governance rule to make sure that some words are never used in the description of operations within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Words"
    ],
    "rule": {
      "description": "Ensures that the description do not contain certain words.",
      "message": "Your operation descriptions should not use the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].description",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-description-words-check.md?ref=main",
    "github_sha": "8d59ce63aae70b01b6cf82f9456d5355b929aedd",
    "collection_id": "12959542-8524926a-cda1-494d-9d38-14cdbb5f36f9"
  },
  {
    "name": "Swagger V2 - Operations Description",
    "slug": "swagger-v2-operations-description",
    "summary": "This is a Spectral governance rule to make sure that some words are never used in the description of operations within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "description": "Ensures that each of the operations have a description.",
      "message": "Your operations all need descriptions.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "description",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-description.md?ref=main",
    "github_sha": "a42c0b36a91defd0aef051e8f641d5a8885e3433",
    "collection_id": "12959542-50391ed6-a4d2-4f06-827e-a2d3dd471fb1"
  },
  {
    "name": "Swagger V2 - Operations Operation IDs Camel Case",
    "slug": "swagger-v2-operations-operation-ids-camel-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are camel case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are camel case.",
      "message": "Your operations IDs need to be camel case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-operation-ids-camel-case.md?ref=main",
    "github_sha": "2a57dbfdec3f5ea54c4ff862de4783a3fd6db8f1",
    "collection_id": "12959542-4a95188a-afb8-4741-9cc1-a07f1103c8c6"
  },
  {
    "name": "Swagger V2 - Operations Operation IDs Kebab Case",
    "slug": "swagger-v2-operations-operation-ids-kebab-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are kebab case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are kebab case.",
      "message": "Your operations IDs need to be kebab case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "kebab"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-operation-ids-kebab-case.md?ref=main",
    "github_sha": "c34ebe67b2fcd3db6bfcfbdec54b4854b201e5d4",
    "collection_id": "12959542-adc996a1-61be-4900-a9be-739aa29f1a3e"
  },
  {
    "name": "Swagger V2 - Operations Operationids Pascal Case",
    "slug": "oswagger-v2-perations-operationids-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that operation Ids are pascal case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that each of the operations IDs are pascal case.",
      "message": "Your operations IDs need to be pascal case.",
      "given": "$.paths.*[get,post,patch,put,delete].operationId",
      "recommended": true,
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/oswagger-v2-perations-operationids-pascal-case.md?ref=main",
    "github_sha": "5ec083ee9ecbbc80eef43830563727fefdd99901",
    "collection_id": "12959542-5d520cb5-2835-450d-be96-6bffb84d48e9"
  },
  {
    "name": "Swagger V2 - Operations Summary Length",
    "slug": "swagger-v2-operations-summary-length",
    "summary": "This is a Spectral governance rule to make sure that operation summaries are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Length"
    ],
    "rule": {
      "description": "Ensures that each of the operations summaries are not too long.",
      "message": "Your operations summaries can't be longer than 50 characters.",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "recommended": true,
      "then": [
        {
          "field": "summary",
          "function": "length",
          "functionOptions": {
            "max": 50
          }
        }
      ],
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-summary-length.md?ref=main",
    "github_sha": "87e5b8e6ee7bbcaa52ee03e4d8c4a6a541c6f892",
    "collection_id": "12959542-b11341b2-0acf-4308-9a6b-ae6f36c7a81a"
  },
  {
    "name": "Swagger V2 - Operations Summary Period None",
    "slug": "swagger-v2-operations-summary-period-none",
    "summary": "This is a Spectral governance rule to make sure that operation summaries do not have a ending period. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "severity": "error",
      "description": "Ensures that each of the operations summaries do not have an ending period.",
      "message": "Your operations summaries should not end with a period.",
      "given": "$.paths[*][*].summary",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\.$"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-summary-period-none.md?ref=main",
    "github_sha": "eb7517784588a7360f1dafb30056a25e56e842f6",
    "collection_id": "12959542-cfb4a67d-9d44-4971-b818-f353f0e57354"
  },
  {
    "name": "Swagger V2 - Operations Summary Words Check",
    "slug": "swagger-v2-operations-summary-words-check",
    "summary": "This is a Spectral governance rule to make sure that operation summaries do not contain specific words. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Words"
    ],
    "rule": {
      "description": "Ensures that each of the operations summaries do not content certain words.",
      "message": "Your operations summaries should not contain the words word, word, and word.",
      "given": "$.paths.*[get,post,patch,put,delete].summary",
      "recommended": true,
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-summary-words-check.md?ref=main",
    "github_sha": "6108bf74c4078583bed623a32f26084de12e2dfc",
    "collection_id": "12959542-34afc7c0-d748-4380-bd88-f14639677156"
  },
  {
    "name": "Swagger V2 - Operations Summary",
    "slug": "swagger-v2-operations-summary",
    "summary": "This is a Spectral governance rule to make sure that all operations have summaries. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations"
    ],
    "rule": {
      "description": "Ensures that each of the operations for an API have a summary.",
      "message": "All of your operations need summaries.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "summary",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-summary.md?ref=main",
    "github_sha": "bfe9df1482f108d793227f32f24440778d912b71",
    "collection_id": "12959542-6a0139a2-96c2-4799-93f7-6bf6c820f29e"
  },
  {
    "name": "Swagger V2 - Operations Tags One",
    "slug": "swagger-v2-operations-tags-one",
    "summary": "This is a Spectral governance rule to make sure that all operations have at least one tag. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Tags"
    ],
    "rule": {
      "description": "Ensures that each of the operations have at least one tag.",
      "message": "All of your operations need to have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-tags-one.md?ref=main",
    "github_sha": "5267caf7ff68ef89441d27cc825122a245b67df8",
    "collection_id": "12959542-2e7e56d9-24aa-4928-94a1-d1c2751f259d"
  },
  {
    "name": "Swagger V2 - Operations Tags",
    "slug": "swagger-v2-operations-tags",
    "summary": "This is a Spectral governance rule to make sure that all operations have a tags property. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Tags"
    ],
    "rule": {
      "description": "Ensures that each of the operations have a tags property.",
      "message": "All of your operations need to have tags.",
      "severity": "error",
      "given": "$.paths.*[get,post,patch,put,delete]",
      "then": [
        {
          "field": "tags",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-operations-tags.md?ref=main",
    "github_sha": "5cd4f58a9e89eeda4aba3c6657e8f203e0e6a6af",
    "collection_id": "12959542-b5fbbd78-efac-41e8-b4e8-80175118236b"
  },
  {
    "name": "Swagger V2 - Parameters Description Length",
    "slug": "swagger-v2-parameters-description-length",
    "summary": "This is a Spectral governance rule to make sure that all parameters description are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Length"
    ],
    "rule": {
      "description": "Ensures that each of parameter description isn't too long.",
      "message": "Your parameter descriptions can't be more than 500 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 500
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-description-length.md?ref=main",
    "github_sha": "380a401e2c1194db3d8e779eb036fb8e85017591",
    "collection_id": "12959542-2aaeffb8-5eab-44a2-b030-cefdbdd6bb47"
  },
  {
    "name": "Swagger V2 - Parameters Description Word Check",
    "slug": "swagger-v2-parameters-description-word-check",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in parameter description. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Words"
    ],
    "rule": {
      "description": "Ensures that some words aren't used in parameter descriptions.",
      "message": "Your parameter descriptions can't contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].description",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-description-word-check.md?ref=main",
    "github_sha": "e1fb8200605d664e5f733372ebc04b79e77b95f4",
    "collection_id": "12959542-401e8a0b-ecd9-4042-9a2e-a52db3409abe"
  },
  {
    "name": "Swagger V2 - Parameters Description",
    "slug": "swagger-v2-parameters-description",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a description in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a descriptions.",
      "message": "Your parameters all need descriptions.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-description.md?ref=main",
    "github_sha": "b36615e3aaae428bc0afc08e355d561431509845",
    "collection_id": "12959542-1bd08ac7-5d51-4e2d-873c-0124e02a516b"
  },
  {
    "name": "Swagger V2 - Parameters Example",
    "slug": "swagger-v2-parameters-example",
    "summary": "This is a Spectral governance rule to make sure that all parameters have an example in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Examples"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a examples.",
      "message": "Your parameters all need examples.",
      "given": "$.paths.*.*.parameters[?(@.example=='query')]",
      "then": [
        {
          "field": "example",
          "function": "truthy"
        },
        {
          "field": "examples",
          "function": "truthy"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-example.md?ref=main",
    "github_sha": "f36752029ecafd3c7db50ddbe01c01cb3da1a5b3",
    "collection_id": "12959542-192aa4ed-d43a-4142-ab55-2b00010038ac"
  },
  {
    "name": "Swagger V2 - Parameters In",
    "slug": "swagger-v2-parameters-in",
    "summary": "This is a Spectral governance rule to make sure that all parameters have an in property within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have an in property.",
      "message": "Your parameters all need to have in properties.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "in",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-in.md?ref=main",
    "github_sha": "e13af3cefaa3bf48e3ed02d96cc97b878257a4ba",
    "collection_id": "12959542-11c86656-67bb-4295-a14d-339e737ad01e"
  },
  {
    "name": "Swagger V2 - Parameters Name Length",
    "slug": "swagger-v2-parameters-name-length",
    "summary": "This is a Spectral governance rule to make sure that all parameter aren't too long within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Length"
    ],
    "rule": {
      "description": "Ensures that that parameter names aren't too long.",
      "message": "Your parameter names should not be longer than 25 characters.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "summary",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name-length.md?ref=main",
    "github_sha": "d4343f837f0884d5e5d7eeb238b482a43b19fbc3",
    "collection_id": "12959542-361aa0e3-8110-42d7-b2c5-5ae7270736aa"
  },
  {
    "name": "Swagger V2 - Parameters Name Camel Case",
    "slug": "swagger-v2-parameters-name-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are camel case within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are camel case.",
      "message": "Your parameter names should all be camel case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name-camel-case.md?ref=main",
    "github_sha": "01aecf0b7be0a7c9a14df6737083e006581bdf18",
    "collection_id": "12959542-916788cf-7caa-4df3-88e6-e16e0c8a448a"
  },
  {
    "name": "Swagger V2 - Parameters Name Pascal Case",
    "slug": "swagger-v2-parameters-name-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are pascal case within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are pascal case.",
      "message": "Your parameter names should all be pascal case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name-pascal-case.md?ref=main",
    "github_sha": "ddfd0f292f82a59ed0f0d71a87273b3f62afbe1d",
    "collection_id": "12959542-3700e4f8-7e8e-49e1-8e0c-b9741a8d5c0c"
  },
  {
    "name": "Swagger V2 - Parameters Name Snake Case",
    "slug": "swagger-v2-parameters-name-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all parameter names are snake case within an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Casing"
    ],
    "rule": {
      "description": "Ensures that that all parameter names are snake case.",
      "message": "Your parameter names should all be snake case.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "field": "name",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name-snake-case.md?ref=main",
    "github_sha": "f7d592fcd647ac81d4bb02b4300179aa7fcd9b18",
    "collection_id": "12959542-e5b8610b-88cd-4e37-8e6a-b443127e330d"
  },
  {
    "name": "Swagger V2 - Parameters Name Word Check",
    "slug": "swagger-v2-parameters-name-word-check",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used for parameter names in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Words"
    ],
    "rule": {
      "description": "Ensures that that all some words aren't used for parameter names.",
      "message": "Your parameter names should not contain the words word, word, and word.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].name",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name-word-check.md?ref=main",
    "github_sha": "0614b57ee5cf8fbe060a1a8f9aa1606d8e80cee0",
    "collection_id": "12959542-151b3996-9381-4ef8-8a6e-7d936bbea990"
  },
  {
    "name": "Swagger V2 - Parameters Name",
    "slug": "swagger-v2-parameters-name",
    "summary": "This is a Spectral governance rule to make sure that all parameters a name in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a name.",
      "message": "Your parameter should all have names.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-name.md?ref=main",
    "github_sha": "66751a53a565f3fbba3854648ebdd0e99cf54005",
    "collection_id": "12959542-e918fba1-ddba-4112-984c-981e8cf0ac53"
  },
  {
    "name": "Swagger V2 - Parameters Schema",
    "slug": "swagger-v2-parameters-schema",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a schema defined in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a schema.",
      "message": "Your parameter should all have a schema defined.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')]",
      "then": {
        "field": "schema",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-schema.md?ref=main",
    "github_sha": "74cebaf7a47c28e9e0aaa34c17d4de7c143d13b1",
    "collection_id": "12959542-8b2626b2-c86b-43d1-a7d5-e8ebe7270d4a"
  },
  {
    "name": "Swagger V2 - Parameters Schema Type",
    "slug": "swagger-v2-parameters-schema-type",
    "summary": "This is a Spectral governance rule to make sure that all parameters have a schema type in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters have a schema type.",
      "message": "Your parameter should all schema types.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].schema",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-schema-type.md?ref=main",
    "github_sha": "4135439efbfc2f589d77a4278b48a663b534e45d",
    "collection_id": "12959542-4db91542-c767-4a18-ab2b-e23e8687ebf4"
  },
  {
    "name": "Swagger V2 - Parameters Schema Type Array",
    "slug": "swagger-v2-parameters-schema-type-array",
    "summary": "This is a Spectral governance rule to make sure that all parameters with schema type of array have items defined in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Parameters",
      "Schema"
    ],
    "rule": {
      "description": "Ensures that that all parameters of schema type array have items defined.",
      "message": "Your parameter schema should have an items property if it is an array.",
      "given": "$.paths.*.*.parameters[?(@.in=='query')].schema[?(@.type=='array')]",
      "then": {
        "field": "items",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-parameters-schema-type-array.md?ref=main",
    "github_sha": "b66597a4fca7d41c62fbe7938f4015d30a856692",
    "collection_id": "12959542-10cfde43-e608-45e7-b429-7732e5c5d87c"
  },
  {
    "name": "Swagger V2 - No Request Body on GET",
    "slug": "swagger-v2-no-request-body-on-get",
    "summary": "This is a Spectral governance rule to make sure that no GET method has a request body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "GET",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that GET methods do not have request bodies.",
      "message": "Your GET methods should not have request bodies.",
      "given": "$.paths.*.get.parameters.*",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query",
            "header",
            "path"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-no-request-body-on-get.md?ref=main",
    "github_sha": "b40477a49931043e10c22dfc785af7c19e17c14f",
    "collection_id": "12959542-2df1e7b3-49be-4897-b8ef-921b0cadad02"
  },
  {
    "name": "Swagger V2 - Request Body on POST",
    "slug": "swagger-v2-request-body-on-post",
    "summary": "This is a Spectral governance rule to make sure that POST methods have a request body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "POST",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that POST methods have request bodies.",
      "message": "Your POST methods should have request bodies.",
      "given": "$.paths.*.post.parameters.*",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query",
            "header",
            "path",
            "body"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-request-body-on-post.md?ref=main",
    "github_sha": "5475889761c69fee13499b34bf6f2d00ecaf6a8a",
    "collection_id": "12959542-b3bbc64c-4491-417f-a800-bf82d8fe6a2b"
  },
  {
    "name": "Swagger V2 - Request Body on PUT",
    "slug": "swagger-v2-request-body-on-put",
    "summary": "This is a Spectral governance rule to make sure that PUT methods have a request body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PUT",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that PUT methods have request bodies.",
      "message": "Your PUT methods should have request bodies.",
      "given": "$.paths.*.put",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query",
            "header",
            "path",
            "body"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-request-body-on-put.md?ref=main",
    "github_sha": "0170b5b4eebc3cf399c3a5c85f570807ef0737f6",
    "collection_id": "12959542-ec521df2-1b19-4354-9a7b-022a90ed34c7"
  },
  {
    "name": "Swagger V2 - Request Body on PATCH",
    "slug": "swagger-v2-request-body-on-patch",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods have a request body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "PATCH",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that PATCH methods have request bodies.",
      "message": "Your PATCH methods should have request bodies.",
      "given": "$.paths.*.patch",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query",
            "header",
            "path",
            "body"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-request-body-on-patch.md?ref=main",
    "github_sha": "92fb23abbf93bc1b1780c16a40c381e30b3c42fc",
    "collection_id": "12959542-b92e76ad-47e6-43d5-ab1b-ccea6bf21ae6"
  },
  {
    "name": "Swagger V2 - No Request Body on DELETE",
    "slug": "swagger-v2-no-request-body-on-delete",
    "summary": "This is a Spectral governance rule to make sure that no DELETE method has a request body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Methods",
      "DELETE",
      "Request Bodies"
    ],
    "rule": {
      "description": "Ensures that DELETE methods do not have request bodies.",
      "message": "Your DELETE methods should not have request bodies.",
      "given": "$.paths.*.delete",
      "recommended": true,
      "severity": "error",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query",
            "header",
            "path"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-no-request-body-on-delete.md?ref=main",
    "github_sha": "41eecca6939a9c9ad420d666fe09e9621c665cc9",
    "collection_id": "12959542-f6b9adb8-2bb4-4b7f-b1ee-889b07a19529"
  },
  {
    "name": "Swagger V2 - Response GET 200 Status Code",
    "slug": "swagger-v2-response-get-200-status-code",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 200 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures GET operations have a 200 status code response.",
      "message": "A GET operation should have a 200 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "200",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-get-200-status-code.md?ref=main",
    "github_sha": "75c4c9ce5fcfee28e3bbd5ec5f13a8d54fa40181",
    "collection_id": "12959542-92e18311-e392-47f0-a6b0-0756d9fc3952"
  },
  {
    "name": "Swagger V2 - Response GET 500 Status Code",
    "slug": "swagger-v2-response-get-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that GET methods all have a 500 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures GET operations have a 500 status code response.",
      "message": "A GET operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].get.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-get-500-status-code.md?ref=main",
    "github_sha": "c29157f397b1f7d1c9b5f87e27de75b455607471",
    "collection_id": "12959542-9a78fce7-9d13-41ee-93c1-8e62b1f76ca6"
  },
  {
    "name": "Swagger V2 - Response POST 201 Status Code",
    "slug": "swagger-v2-response-post-201-status-code",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 201 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures POST operations have a 201 status code response.",
      "message": "A POST operation should have a 201 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "201",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-post-201-status-code.md?ref=main",
    "github_sha": "339b46d37cebf3c17c0168821613d931a762533d",
    "collection_id": "12959542-cf2c8c32-26db-4fd9-a00c-075c526b5fa7"
  },
  {
    "name": "Swagger V2 - Response POST 500 Status Code",
    "slug": "swagger-v2-response-post-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that POST methods all have a 500 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures POST operations have a 500 status code response.",
      "message": "A POST operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].post.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-post-500-status-code.md?ref=main",
    "github_sha": "fd7ff768c7855163c3d06a7f0627a82e914be347",
    "collection_id": "12959542-c44796e1-3160-4d51-b4af-536fda7e4522"
  },
  {
    "name": "Swagger V2 - Response PUT 204 Status Code",
    "slug": "swagger-v2-response-put-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that PUT methods all have a 204 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations have a 204 status code response.",
      "message": "A PUT operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-put-204-status-code.md?ref=main",
    "github_sha": "954a848dd362921b3a1904816557aa3b63b85df5",
    "collection_id": "12959542-2a7f4f53-ef67-4f00-bce1-62b20738d748"
  },
  {
    "name": "Swagger V2 - Response PUT 204 No Body",
    "slug": "swagger-v2-response-put-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that PUT methods do not have a response body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations do not have a response body.",
      "message": "A PUT operation should not have a response body.",
      "severity": "error",
      "given": "$paths.put.responses.204",
      "then": {
        "field": "schema",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-put-204-no-body.md?ref=main",
    "github_sha": "34215f8438b9c813dcca6a590b0c2f2a76147434",
    "collection_id": "12959542-bd4d31f1-3bca-4a12-a014-e1246df3a3af"
  },
  {
    "name": "Swagger V2 - Response PUT 500 Status Code",
    "slug": "swagger-v2-response-put-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that PUT methods all have a 500 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PUT operations have a 500 status code response.",
      "message": "A PUT operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].put.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-put-500-status-code.md?ref=main",
    "github_sha": "c48199e8fb3635f8f20b92c5c0aa8a9e589dca26",
    "collection_id": "12959542-4c04eb88-3d26-4e48-a17c-c0271f08c460"
  },
  {
    "name": "Swagger V2 - Response PATCH 204 Status Code",
    "slug": "swagger-v2-response-patch-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods all have a 204 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations have a 204 status code response.",
      "message": "A PATCH operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-patch-204-status-code.md?ref=main",
    "github_sha": "429912e0926525c620c6e9a4fb8b0d60d5d27951",
    "collection_id": "12959542-2280e789-3597-4fdd-aae3-6139a0baf354"
  },
  {
    "name": "Swagger V2 - Response PATCH 204 No Body",
    "slug": "swagger-v2-response-patch-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods do not have a response body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations do not have a response body.",
      "message": "A PATCH operation should not have a response body.",
      "severity": "error",
      "given": "$paths.patch.responses.204",
      "then": {
        "field": "schema",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-patch-204-no-body.md?ref=main",
    "github_sha": "2b95192b959dbe18189d992e2bfe7878989d2c80",
    "collection_id": "12959542-000d83be-ec82-43f1-8c1c-e09bec240b89"
  },
  {
    "name": "Swagger V2 - Response PATCH 500 Status Code",
    "slug": "swagger-v2-response-patch-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that PATCH methods all have a 500 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures PATCH operations have a 500 status code response.",
      "message": "A PATCH operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].patch.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-patch-500-status-code.md?ref=main",
    "github_sha": "1d62b9739707f74f7de2cc255ebd1f76e53da465",
    "collection_id": "12959542-feec7fd7-1b33-4a0a-ba5c-70b1a43859e1"
  },
  {
    "name": "Swagger V2 - Response DELETE 204 Status Code",
    "slug": "swagger-v2-response-delete-204-status-code",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods all have a 204 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations have a 204 status code response.",
      "message": "A DELETE operation should have a 204 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "204",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-delete-204-status-code.md?ref=main",
    "github_sha": "16712b7971b832ed8352327c2921a5ca86cbf607",
    "collection_id": "12959542-e9514f93-91e8-4683-8746-4980a06a1218"
  },
  {
    "name": "Swagger V2 - Response DELETE 204 No Body",
    "slug": "swagger-v2-response-delete-204-no-body",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods do not have a response body in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations do not have a response body.",
      "message": "A DELETE operation should not have a response body.",
      "severity": "error",
      "given": "$paths.delete.responses.204",
      "then": {
        "field": "schema",
        "function": "falsy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-delete-204-no-body.md?ref=main",
    "github_sha": "9915c677b3ed4eddfc16a3a15ce1fe1d94181006",
    "collection_id": "12959542-38cb2ff5-4cb3-41b8-a9f7-5f19931c97ea"
  },
  {
    "name": "Swagger V2 - Response DELETE 500 Status Code",
    "slug": "swagger-v2-response-delete-500-status-code",
    "summary": "This is a Spectral governance rule to make sure that DELETE methods all have a 500 status code response in an Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Operations",
      "Responses",
      "Status Codes"
    ],
    "rule": {
      "description": "Ensures DELETE operations have a 500 status code response.",
      "message": "A DELETE operation should have a 500 status code for the response.",
      "severity": "warn",
      "formats": [
        "oas2",
        "oas2"
      ],
      "given": "$.paths[*].delete.responses",
      "then": {
        "field": "500",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-response-delete-500-status-code.md?ref=main",
    "github_sha": "3a26b0f147486b53a4a88637c1b7857d4c703fee",
    "collection_id": "12959542-c61e2db1-bfef-4763-8727-8fbd8352bb64"
  },
  {
    "name": "Swagger V2 - Schema Names Length",
    "slug": "swagger-v2-schema-names-length",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an Swagger are not too long. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensure schema names should be no more than 25 characters.",
      "message": "All schema names should be less than 25 characters.",
      "severity": "error",
      "given": "$.definitions",
      "then": {
        "field": "@key",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-names-length.md?ref=main",
    "github_sha": "935cba6239f89e493fe157d4cd2c1be91b9ed0c4",
    "collection_id": "12959542-8fcd653f-367d-4039-a752-2e9bacb0fc2c"
  },
  {
    "name": "Swagger V2 - Schema Names Camel Case",
    "slug": "swagger-v2-schema-names-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an Swagger are camel case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are camel case.",
      "message": "Schema names should be camel case.",
      "severity": "error",
      "given": "$.definitions",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-names-camel-case.md?ref=main",
    "github_sha": "0b978a80dc285184767c39ce95bb9f2e968d72de",
    "collection_id": "12959542-22d90165-6d8c-4f2e-ac1f-5640430db3ba"
  },
  {
    "name": "Swagger V2 - Schema Names Pascal Case",
    "slug": "swagger-v2-schema-names-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an Swagger are pascal case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are pascal case.",
      "message": "Schema names should be pascal case.",
      "severity": "error",
      "given": "$.definitions",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-names-pascal-case.md?ref=main",
    "github_sha": "57697a1f9fe073c1674d414b02755fb573d4da9e",
    "collection_id": "12959542-6b7b5c18-7a10-4115-9e4d-455067f72c32"
  },
  {
    "name": "Swagger V2 - Schema Names Snake Case",
    "slug": "swagger-v2-schema-names-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all schema names in an Swagger are snake case. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensure all schema names are snake case.",
      "message": "Schema names should be snake case.",
      "severity": "error",
      "given": "$.definitions",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-names-snake-case.md?ref=main",
    "github_sha": "2346582a73eb554ebd5600122683f062bdab2a35",
    "collection_id": "12959542-5774ccc6-eb14-41fa-8024-0b94ad95deb3"
  },
  {
    "name": "Swagger V2 - Schema Names Words",
    "slug": "swagger-v2-schema-names-words",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in schema names within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Words"
    ],
    "rule": {
      "description": "Schema names should not contain certain words.",
      "message": "Schema property names not contains the words word, word, and word.",
      "severity": "error",
      "given": "$.definitions",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-names-words.md?ref=main",
    "github_sha": "47ab158a3d71c608a5cbe1d1b238d40ea4a59bc9",
    "collection_id": "12959542-3d92ae90-4ab9-44a7-b53c-948d2abf32de"
  },
  {
    "name": "Swagger V2 - Schema Description",
    "slug": "swagger-v2-schema-description",
    "summary": "This is a Spectral governance rule to make sure that all schema in an Swagger have a description.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensure all schema properties should have a description.",
      "message": "All schema should have descriptions.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-description.md?ref=main",
    "github_sha": "ffa607a948a234629d4de434568691aed0c6feaf",
    "collection_id": "12959542-2f186c20-fb5e-47af-ba2d-23fe2377c176"
  },
  {
    "name": "Swagger V2 - Schema Description Length",
    "slug": "swagger-v2-schema-description-length",
    "summary": "This is a Spectral governance rule to make sure that all schema in an Swagger do not have too long of descriptions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "All schemas descriptions should be shorter than 20 characters.",
      "message": "Description needs to be less than 20 characters.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 20
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-description-length.md?ref=main",
    "github_sha": "28ca8c0298d814b39e1fe2ce6f86b476de67ea2f",
    "collection_id": "12959542-11164648-cbfd-4830-a194-40b0deac366c"
  },
  {
    "name": "Swagger V2 - Schema Description Words",
    "slug": "swagger-v2-schema-description-words",
    "summary": "This is a Spectral governance rule to make sure that all schema in an Swagger do not contain certain words within the description.. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Some words should not be be contained within the schema description.",
      "message": "Do not use the words word, word, and word in the schema descriptions.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-description-words.md?ref=main",
    "github_sha": "85c4dc07d22d66e01b587fb05df116e85d179377",
    "collection_id": "12959542-ec4c77f4-91f1-4bab-8344-6ea65c985d22"
  },
  {
    "name": "Swagger V2 - Schema Properties",
    "slug": "swagger-v2-schema-properties",
    "summary": "This is a Spectral governance rule to make sure that all schema have properties within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema should have properties.",
      "message": "All of your schema need to have properties.",
      "severity": "error",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "properties",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties.md?ref=main",
    "github_sha": "1aea1e0cbe4bf5bb994d80e6a7c9c03b9fd2c27a",
    "collection_id": "12959542-4b140788-151b-4063-b37c-3283a19a4a88"
  },
  {
    "name": "Swagger V2 - Schema Properties Descriptions Length",
    "slug": "swagger-v2-schema-properties-descriptions-length",
    "summary": "This is a Spectral governance rule to make sure that schema property descriptions are too long within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensure that schema descriptions aren't too long.",
      "message": "The schema description length needs to be less than 250 characters.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.properties.*",
      "then": {
        "field": "description",
        "function": "length",
        "functionOptions": {
          "max": 250
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-descriptions-length.md?ref=main",
    "github_sha": "c0c447a68a8b7fc644e31e6c64d182e1756de78c",
    "collection_id": "12959542-dcf7abf1-3f93-405f-b694-4b33d217a9da"
  },
  {
    "name": "Swagger V2 - Schema Properties Descriptions Words",
    "slug": "swagger-v2-schema-properties-descriptions-words",
    "summary": "This is a Spectral governance rule to make sure that some words aren't used in schema property descriptions within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Some words should not exist within the property description.",
      "message": "Schema property descriptions should not contain the words word, word, and word.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.properties.*",
      "then": {
        "field": "description",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-descriptions-words.md?ref=main",
    "github_sha": "ba3348818fc46b64de3f0d7b5c8094e656a694dd",
    "collection_id": "12959542-87b1d350-fbd4-45aa-9db8-379bdb2f70cf"
  },
  {
    "name": "Swagger V2 - Schema Properties Descriptions",
    "slug": "swagger-v2-schema-properties-descriptions",
    "summary": "This is a Spectral governance rule to make sure that all schema properties have descriptions within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensure that all schemas properties should have a description.",
      "message": "All schema properties should have descriptions.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.properties.*",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-descriptions.md?ref=main",
    "github_sha": "1ab373e90bef339709f2eb08ab50fac92a4b2742",
    "collection_id": "12959542-39173ff1-964f-4bd0-949b-481012fadb61"
  },
  {
    "name": "Swagger V2 - Schema Properties Names Length",
    "slug": "swagger-v2-schema-properties-names-length",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are not too long within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Length"
    ],
    "rule": {
      "description": "Ensuring that property names are no more than 25 characters.",
      "message": "Schema property names should be less than 25 characters .",
      "severity": "error",
      "given": "$.definitions.properties.*",
      "then": {
        "field": "@key",
        "function": "length",
        "functionOptions": {
          "max": 25
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-names-length.md?ref=main",
    "github_sha": "8e67bdf268f5fe433989b9f29fefa83a37e79359",
    "collection_id": "12959542-19374431-0977-47aa-ad4f-681b53557464"
  },
  {
    "name": "Swagger V2 - Schema Properties Names Camel Case",
    "slug": "swagger-v2-schema-properties-names-camel-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are camel case within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are camel case.",
      "message": "All schema property names should be camel case.",
      "severity": "error",
      "given": "$.definitions.properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "camel"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-names-camel-case.md?ref=main",
    "github_sha": "7eb25678184940a7fbc871f0e2c50337d21572bf",
    "collection_id": "12959542-83f6348a-e94b-4b3a-a17c-8cc1bd965dd4"
  },
  {
    "name": "Swagger V2 - Schema Properties Names Pascal Case",
    "slug": "swagger-v2-schema-properties-names-pascal-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are pascal case within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are pascal case.",
      "message": "All schema property names should be pascal case.",
      "severity": "error",
      "given": "$.definitions.properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "pascal"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-names-pascal-case.md?ref=main",
    "github_sha": "defc8bd0c1a182ddab54f2486179e439d0cda31e",
    "collection_id": "12959542-a7fc069f-fa44-4603-8cd1-9dd485df5df1"
  },
  {
    "name": "Swagger V2 - Schema Properties Names Snake Case",
    "slug": "swagger-v2-schema-properties-names-snake-case",
    "summary": "This is a Spectral governance rule to make sure that all schema property names are snake case within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Casing"
    ],
    "rule": {
      "description": "Ensuring that schema property names are snake case.",
      "message": "All schema property names should be snake case.",
      "severity": "error",
      "given": "$.definitions.properties.*",
      "then": {
        "field": "@key",
        "function": "casing",
        "functionOptions": {
          "type": "snake"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-names-snake-case.md?ref=main",
    "github_sha": "8091311385ae91207b7b1b904d15f46e427e5650",
    "collection_id": "12959542-4caadf51-d837-4bdc-9283-c023ee9359f6"
  },
  {
    "name": "Swagger V2 - Schema Properties Names Words",
    "slug": "swagger-v2-schema-properties-names-words",
    "summary": "This is a Spectral governance rule to make sure that some words are not used for schema property names within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema",
      "Words"
    ],
    "rule": {
      "description": "Schema property names should not contain certain words.",
      "message": "Schema property names should not contain the words word, word, and word.",
      "severity": "error",
      "given": "$.definitions.properties.*",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\b(word|word|word)\\b"
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-names-words.md?ref=main",
    "github_sha": "b768e99ee1eb250a4bb9e9aeebaaf1a10d587721",
    "collection_id": "12959542-e588c051-bed0-42e9-a2f5-d8578f2736ed"
  },
  {
    "name": "Swagger V2 - Schema Properties Type",
    "slug": "swagger-v2-schema-properties-type",
    "summary": "This is a Spectral governance rule to make sure that schema properties have a type defined within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schemas properties should have a type.",
      "message": "All schema properties should have type property.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.properties.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-type.md?ref=main",
    "github_sha": "5715f77ba65b9277115b3283bfe58eab6158d557",
    "collection_id": "12959542-61a51155-5ef0-433f-ae92-8321a1b23650"
  },
  {
    "name": "Swagger V2 - Schema Properties Allowed Integer Format",
    "slug": "swagger-v2-schema-properties-allowed-integer-format",
    "summary": "This is a Spectral governance rule to enforce that Swagger properties that use integer type have a format of int32 or int64. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers",
      "Formats"
    ],
    "rule": {
      "description": "Requires integer properties to have a format of int32 or int64.",
      "message": "Type format should be be int32 or int64.",
      "formats": [
        "oas2"
      ],
      "severity": "hint",
      "recommended": true,
      "given": "$.definitions.properties.[?(@.type==\"integer\")]",
      "then": {
        "field": "format",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "int32",
            "int64"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-allowed-integer-format.md?ref=main",
    "github_sha": "74c8d636813d2f939c8e7c42613d5f451544f64f",
    "collection_id": "12959542-edd02a8e-fc18-4a87-8dba-e55c7c168bbb"
  },
  {
    "name": "Swagger V2 - Schema Properties Allowed Number Format",
    "slug": "swagger-v2-schema-properties-allowed-number-format",
    "summary": "This is a Spectral governance rule to enforce that Swagger properties that use number type have a format of decimal32, decimal64, float, double, or decimal128. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers",
      "Formats"
    ],
    "rule": {
      "description": "Ensure only allowed number formats.",
      "message": "You must have format property of decimal32, decimal64, float, double, decimal128",
      "formats": [
        "oas2"
      ],
      "severity": "hint",
      "recommended": true,
      "given": "$.definitions.properties.[?(@.type==\"number\")]",
      "then": {
        "field": "format",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "decimal32",
            "decimal64",
            "float",
            "double",
            "decimal128"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-allowed-number-format.md?ref=main",
    "github_sha": "028cc7a83a6131aefb855e936a1486b12849e63d",
    "collection_id": "12959542-74ca6cd1-a47f-4b77-b65f-7a948afb1bbc"
  },
  {
    "name": "Swagger V2 - Schema Properties Define Array Boundaries",
    "slug": "swagger-v2-schema-properties-define-array-boundaries",
    "summary": "This is a Spectral governance rule to enforce that arrays in an Swagger always have minimum and maximum boundaries define, preventing these properties from being overloaded. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tag",
      "Arrays",
      "Security"
    ],
    "rule": {
      "description": "Requires that arrays have their minimum and maximum boundaries defined.",
      "message": "Arrays must have minItems and maxItems defined.",
      "formats": [
        "oas2"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$.definitions.properties.[?(@.type==\"array\")]"
      ],
      "then": [
        {
          "field": "maxItems",
          "function": "defined"
        },
        {
          "field": "minItems",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-define-array-boundaries.md?ref=main",
    "github_sha": "280f387d33db0eadaf4785f912c679d4f6eb480e",
    "collection_id": "12959542-1c0310ba-f5bd-4a40-a4f8-c033e15ee325"
  },
  {
    "name": "Swagger V2 - Schema Properties Define Number Boundaries",
    "slug": "swagger-v2-schema-properties-define-number-boundaries",
    "summary": "This is a Spectral governance rule to enforce that the numeric properties within an Swagger all have boundaries defined. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Numbers"
    ],
    "rule": {
      "description": "Ensures that all number properties have boundaries defined.",
      "message": "Numeric types need to have a minimum and maximum property defined.",
      "formats": [
        "oas2"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$.definitions.properties.[?(@.type==\"number\")]",
        "$.definitions.properties.[?(@.type==\"integer\")]"
      ],
      "then": [
        {
          "field": "maximum",
          "function": "defined"
        },
        {
          "field": "minimum",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-properties-define-number-boundaries.md?ref=main",
    "github_sha": "8863b3a033a068ae552859925e1a26d6512c8fab",
    "collection_id": "12959542-1c4106a3-b8e9-4e8a-8d47-7ac06c488838"
  },
  {
    "name": "Swagger V2 - Schema Required",
    "slug": "swagger-v2-schema-required",
    "summary": "This is a Spectral governance rule to make sure that all schema have a required property within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema have a required property.",
      "message": "All of your schema need to have a required property.",
      "severity": "warn",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "required",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-required.md?ref=main",
    "github_sha": "6cde3065c4b223a9b863f59357e726a921404466",
    "collection_id": "12959542-304d3775-5287-45ad-9ece-e22d638f7539"
  },
  {
    "name": "Swagger V2 - Schema Type",
    "slug": "swagger-v2-schema-type",
    "summary": "This is a Spectral governance rule to make sure that all schema have a required property within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Schema"
    ],
    "rule": {
      "description": "Ensuring that all schema have a type property.",
      "message": "All schema should have a type property.",
      "severity": "error",
      "formats": [
        "oas2"
      ],
      "given": "$.definitions.*",
      "then": {
        "field": "type",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-type.md?ref=main",
    "github_sha": "b6bfd58a7280f95238fb22de199294e1d213c087",
    "collection_id": "12959542-83052e06-f475-4848-966d-0b352d47dc86"
  },
  {
    "name": "Swagger V2 - Schema Additional Properties",
    "slug": "swagger-v2-schema-additional-properties",
    "summary": "This is a Spectral governance rule to enforce that schema objects do not have additional properties enabled for each Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Restricts objects from having additional properties defined.",
      "message": "All schema objects should have additionalProperties set to false.",
      "formats": [
        "oas2"
      ],
      "severity": "warn",
      "recommended": true,
      "given": [
        "$.[?(@.type==\"object\" && @.additionalProperties && @.additionalProperties!=true && @.additionalProperties!=false )]"
      ],
      "then": [
        {
          "field": "maxProperties",
          "function": "defined"
        }
      ]
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-schema-additional-properties.md?ref=main",
    "github_sha": "8ce414d3151da9dc3280ff59469b01c3e9a1676c",
    "collection_id": "12959542-e8246698-9492-4c38-ab8d-f2414f97d07f"
  },
  {
    "name": "Swagger V2 - Tags Name",
    "slug": "swagger-v2-tags-name",
    "summary": "This is a Spectral governance rule to make sure that all tags have a name within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that all tags have a name.",
      "message": "All tags should have a name.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "name",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-tags-name.md?ref=main",
    "github_sha": "088cf9bf36cb4328b11bb7284489b8fabe604354",
    "collection_id": "12959542-ecefdeb1-d48d-455e-a9bc-c1f86e0d3b20"
  },
  {
    "name": "Swagger V2 - Tags Object",
    "slug": "swagger-v2-tags-object",
    "summary": "This is a Spectral governance rule to make sure that there is a central tag object within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that there are tags being applied.",
      "message": "You should have a central tags object.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-tags-object.md?ref=main",
    "github_sha": "30a0400c1609333ae2d093927b1d7c7501b8888f",
    "collection_id": "12959542-a46970b9-6c5d-4749-bc3f-803c7949a0dc"
  },
  {
    "name": "Swagger V2 - Tags One",
    "slug": "swagger-v2-tags-one",
    "summary": "This is a Spectral governance rule to make sure that there is at least one tag within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that there is at least on tag being applied.",
      "message": "You should have at least one tag.",
      "given": "$",
      "severity": "error",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "min": 1
        }
      },
      "type": "style"
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-tags-one.md?ref=main",
    "github_sha": "9700021038e58dd5d2e845b7147be24cfc6b2741",
    "collection_id": "12959542-9b3cbdac-c42c-49c8-a7ef-0d248edb2864"
  },
  {
    "name": "Swagger V2 - Tags Description",
    "slug": "swagger-v2-tags-description",
    "summary": "This is a Spectral governance rule to make sure that all tags have a description within Swagger definitions. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Tags"
    ],
    "rule": {
      "description": "Ensuring that all tags have a description.",
      "message": "All tags should have a description.",
      "given": "$.tags[*]",
      "severity": "error",
      "then": {
        "field": "description",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-tags-description.md?ref=main",
    "github_sha": "4aba7c35a66a03a679efd8f2d36e8200a8fb5f9a",
    "collection_id": "12959542-15ac934e-a3bf-4569-b308-1373bec70a4a"
  },
  {
    "name": "Swagger V2 - Security API Key",
    "slug": "swagger-v2-security-api-key",
    "summary": "This is a Spectral governance rule to enforce that API key security is applied to the Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of an API key for security.",
      "message": "Must add security definition object with type of apiKey",
      "severity": "error",
      "given": "$.security.*",
      "then": {
        "field": "type",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "apiKey"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-api-key.md?ref=main",
    "github_sha": "2b50ff7723ee0230cc3ff27b89b94f3c90765f63",
    "collection_id": "12959542-83dc6a80-631a-4fe7-a7a9-62ce7d4ed3b8"
  },
  {
    "name": "Swagger V2 - Security Basic",
    "slug": "swagger-v2-security-basic",
    "summary": "This is a Spectral governance rule to enforce that basic security is applied to the Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of an basic for security.",
      "message": "Must add security definition object with type of basic",
      "severity": "error",
      "given": "$.security.*",
      "then": {
        "field": "type",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "basic"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-basic.md?ref=main",
    "github_sha": "61feb75d84cece32e54de74808786edb5d11304b",
    "collection_id": "12959542-dcf26b45-fe4b-4321-a4e2-1cbf5df74410"
  },
  {
    "name": "Swagger V2 - Security Oauth2",
    "slug": "swagger-v2-security-oauth2",
    "summary": "This is a Spectral governance rule to enforce that OAuth 2.0 security is applied to the Swagger. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of an OAuth 2.0 for security.",
      "message": "Must add security definition object with type of oauth2",
      "severity": "error",
      "given": "$.security.*",
      "then": {
        "field": "type",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "oauth2"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-oauth2.md?ref=main",
    "github_sha": "67b064077360d8f15bb1c0337fd09be9d20a06c8",
    "collection_id": "12959542-596f3894-16f5-48c9-a293-57fa36d45512"
  },
  {
    "name": "Swagger V2 - Security in Query",
    "slug": "swagger-v2-security-in-query",
    "summary": "This is a Spectral governance rule to enforce that basic security is applied to the Swagger using query parameter. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of query parameter for security.",
      "message": "Must add query parameter to in property for security object",
      "severity": "error",
      "given": "$.security.*",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "query"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-in-query.md?ref=main",
    "github_sha": "7795841f66560d815fdb46cdb37e8e19f295ecb0",
    "collection_id": "12959542-afbe9cd4-6af4-4a4f-a34f-96f47448b80d"
  },
  {
    "name": "Swagger V2 - Security in Header",
    "slug": "swagger-v2-security-in-header",
    "summary": "This is a Spectral governance rule to enforce that basic security is applied to the Swagger using header. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires the usage of header for security.",
      "message": "Must add header to in property for security object",
      "severity": "error",
      "given": "$.security.*",
      "then": {
        "field": "in",
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "header"
          ]
        }
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-in-header.md?ref=main",
    "github_sha": "591ded8a13b11d94063fc75e0c71a90c85239525",
    "collection_id": "12959542-ffb70732-70f5-4cbe-bb50-55c011431a9c"
  },
  {
    "name": "Swagger V2 - Security Applied to Operations",
    "slug": "swagger-v2-security-applied-to-operations",
    "summary": "This is a Spectral governance rule to enforce that security is applied to all operations. Here is a JSON version of the rule that can be applied using this API-driven collection API, or at CLI or CI/CD pipeline.",
    "tags": [
      "Security"
    ],
    "rule": {
      "description": "Requires security to be applied to all operations.",
      "message": "Each operation must have a security property.",
      "severity": "error",
      "given": "$.paths.*.*",
      "then": {
        "field": "security",
        "function": "truthy"
      }
    },
    "github_url": "https://api.github.com/repos/postman-open-technologies/linting-rules/contents/_rules/swagger-v2-security-applied-to-operations.md?ref=main",
    "github_sha": "a5ab9b89cfa00b1ec8388f9aadb210bd3b64edba",
    "collection_id": "12959542-668d0eed-61d8-4975-ab62-3f54bec3ed3c"
  }
]
